msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-11-30 23:19+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: API set for plugins on the adaption phase\n"
"layout: en\n"
"---"
msgstr ""
"---\n"
"title: 適合フェーズでのプラグインAPI\n"
"layout: ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## Abstract {#abstract}"
msgstr "## 概要 {#abstract}"

msgid ""
"Each Droonga Engine plugin can have its *adapter*. On the adaption phase, adap"
"ters can modify both incoming messages (from the Protocol Adapter to the Droon"
"ga Engine, in other words, they are \"request\"s) and outgoing messages (from th"
"e Droonga Engine to the Protocol Adapter, in other words, they are \"response\"s"
")."
msgstr ""
"各々のDroonga Engineプラグインは、それ自身のための*アダプター*を持つことができます。適合フェーズでは、アダプターは入力メッセージ（Proto"
"col AdapterからDroonga Engineへ送られてきたリクエストに相当）と出力メッセージ（Droonga EngineからProtocol A"
"dapterへ送られるレスポンスに相当）の両方について変更を加えることができます。"

msgid "### How to define an adapter? {#howto-define}"
msgstr "### アダプターの定義の仕方 {#howto-define}"

msgid "For example, here is a sample plugin named \"foo\" with an adapter:"
msgstr "例えば、「foo」という名前のプラグインにアダプターを定義する場合は以下のようにします："

msgid ""
"~~~ruby\n"
"require \"droonga/plugin\""
msgstr ""

msgid ""
"module Droonga::Plugins::FooPlugin\n"
"  extend Plugin\n"
"  register(\"foo\")"
msgstr ""

msgid ""
"  class Adapter < Droonga::Adapter\n"
"    # operations to configure this adapter\n"
"    XXXXXX = XXXXXX"
msgstr ""
"  class Adapter < Droonga::Adapter\n"
"    # このアダプターを設定するための操作\n"
"    XXXXXX = XXXXXX"

msgid ""
"    def adapt_input(input_message)\n"
"      # operations to modify incoming messages\n"
"      input_message.XXXXXX = XXXXXX\n"
"    end"
msgstr ""
"    def adapt_input(input_message)\n"
"      # 入力メッセージを変更するための操作\n"
"      input_message.XXXXXX = XXXXXX\n"
"    end"

msgid ""
"    def adapt_output(output_message)\n"
"      # operations to modify outgoing messages\n"
"      output_message.XXXXXX = XXXXXX\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"    def adapt_output(output_message)\n"
"      # 出力メッセージを変更するための操作\n"
"      output_message.XXXXXX = XXXXXX\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "Steps to define an adapter:"
msgstr "アダプターを定義するための手順は以下の通りです："

msgid ""
" 1. Define a module for your plugin (ex. `Droonga::Plugins::FooPlugin`) and re"
"gister it as a plugin. (required)\n"
" 2. Define an adapter class (ex. `Droonga::Plugins::FooPlugin::Adapter`) inher"
"iting [`Droonga::Adapter`](#classes-Droonga-Adapter). (required)\n"
" 3. [Configure conditions to apply the adapter](#howto-configure). (required)\n"
" 4. Define adaption logic for incoming messages as [`#adapt_input`](#classes-D"
"roonga-Adapter-adapt_input). (optional)\n"
" 5. Define adaption logic for outgoing messages as [`#adapt_output`](#classes-"
"Droonga-Adapter-adapt_output). (optional)"
msgstr ""
" 1. プラグイン用のモジュール（例：`Droonga::Plugins::FooPlugin`）を定義し、プラグインとして登録する。（必須）\n"
" 2. [`Droonga::Adapter`](#classes-Droonga-Adapter)を継承したアダプタークラス（例：`Droonga::Pl"
"ugins::FooPlugin::Adapter`）を定義する。（必須）\n"
" 3. [アダプターを適用する条件を設定する](#howto-configure)。（必須）\n"
" 4. 入力メッセージに対する変更操作を[`#adapt_input`](#classes-Droonga-Adapter-adapt_input)として定"
"義する。（任意）\n"
" 5. 出力メッセージに対する変更操作を[`#adapt_output`](#classes-Droonga-Adapter-adapt_output)とし"
"て定義する。（任意）"

msgid ""
"See also the [plugin development tutorial](../../../tutorial/plugin-developmen"
"t/adapter/)."
msgstr "[プラグイン開発のチュートリアル](../../../tutorial/plugin-development/adapter/)も参照して下さい。"

msgid "### How an adapter works? {#how-works}"
msgstr "### アダプターはどのように操作するか {#how-works}"

msgid "An adapter works like following:"
msgstr "アダプターは以下のように動作します："

msgid ""
" 1. The Droonga Engine starts.\n"
"    * A global instance of the adapter class (ex. `Droonga::Plugins::FooPlugin"
"::Adapter`) is created and it is registered.\n"
"      * The input pattern and the output pattern are registered.\n"
"    * The Droonga Engine starts to wait for incoming messages.\n"
" 2. An incoming message is transferred from the Protocol Adapter to the Droong"
"a Engine.\n"
"    Then, the adaption phase (for an incoming message) starts.\n"
"    * The adapter's [`#adapt_input`](#classes-Droonga-Adapter-adapt_input) is "
"called, if the message matches to the [input matching pattern](#config) of the"
" adapter.\n"
"    * The method can modify the given incoming message, via [its methods](#cla"
"sses-Droonga-InputMessage).\n"
" 3. After all adapters are applied, the adaption phase for an incoming message"
" ends, and the message is transferred to the next \"planning\" phase.\n"
" 4. An outgoing message returns from the previous \"collection\" phase.\n"
"    Then, the adaption phase (for an outgoing message) starts.\n"
"    * The adapter's [`#adapt_output`](#classes-Droonga-Adapter-adapt_output) i"
"s called, if the message meets following both requirements:\n"
"      - It is originated from an incoming message which was processed by the a"
"dapter itself.\n"
"      - It matches to the [output matching pattern](#config) of the adapter.\n"
"    * The method can modify the given outgoing message, via [its methods](#cla"
"sses-Droonga-OutputMessage).\n"
" 5. After all adapters are applied, the adaption phase for an outgoing message"
" ends, and the outgoing message is transferred to the Protocol Adapter."
msgstr ""
" 1. Droonga Engineが起動する。\n"
"    * アダプタークラス（例：`Droonga::Plugins::FooPlugin::Adapter`）の唯一のインスタンスが作られ、登録される。\n"
"      * 入力のマッチングパターンおよび出力のマッチングパターンが登録される。\n"
"    * Droonga Engineが起動し、入力メッセージを待ち受ける。\n"
" 2. 入力メッセージがProtocol AdapterからDroonga Engineへ送られてくる。\n"
"    この時点で（入力メッセージ用の）適合フェーズが開始される。\n"
"    * そのメッセージが[入力のマッチングパターン](#config)にマッチするアダプターについて、アダプターの[`#adapt_input`](#c"
"lasses-Droonga-Adapter-adapt_input)が呼ばれる。\n"
"    * このメソッドは、[入力メッセージ自身が持つメソッド](#classes-Droonga-InputMessage)を通じて入力メッセージを変更す"
"ることができる。\n"
" 3. すべてのアダプターが適用された時点で、入力メッセージ用の適合フェーズが終了し、メッセージが次の立案フェーズに送られる。\n"
" 4. 出力メッセージが前の集約フェーズから送られてくる。\n"
"    この時点で（出力メッセージ用の）適合フェーズが開始される。\n"
"    * そのメッセージ外貨の両方の条件を満たす場合に、アダプターの[`#adapt_output`](#classes-Droonga-Adapter-"
"adapt_output)が呼ばれる：\n"
"      - そのメッセージが、そのアダプター自身によって処理された入力メッセージに起因した物である。\n"
"      - そのメッセージが、アダプターの[出力のマッチングパターン](#config)にマッチする。\n"
"    * このメソッドは、[出力メッセージ自身が持つメソッド](#classes-Droonga-OutputMessage)を通じて出力メッセージを変更"
"することができる。\n"
" 5. すべてのアダプターが適用された時点で、出力メッセージ用の適合フェーズが終了し、メッセージがProtocol Adapterに送られる。"

msgid ""
"As described above, the Droonga Engine creates only one global instance of the"
" adapter class for each plugin.\n"
"You should not keep stateful information for a pair of incoming and outgoing m"
"essages as instance variables of the adapter itself.\n"
"Instead, you should give stateful information as a part of the incoming messag"
"e body, and receive it from the body of the corresponding outgoing message."
msgstr ""
"上記の通り、Droonga Engineは各プラグインのアダプタークラスについて、インスタンスを全体で1つだけ生成します。\n"
"対になった入力メッセージと出力メッセージのための状態を示す情報をアダプター自身のインスタンス変数として保持してはいけません。\n"
"代わりに、状態を示す情報を入力メッセージのbodyの一部として埋め込み、対応する出力メッセージのbodyから取り出すようにして下さい。"

msgid ""
"Any error raised from the adapter is handled by the Droonga Engine itself. See"
" also [error handling][]."
msgstr ""
"アダプター内で発生したすべてのエラーは、Droonga Engine自身によって処理されます。[エラー処理][error handling]も併せて参照して"
"下さい。"

msgid "## Configurations {#config}"
msgstr "## 設定 {#config}"

msgid ""
"`input_message.pattern` ([matching pattern][], optional, default=`nil`)\n"
": A [matching pattern][] for incoming messages.\n"
"  If no pattern (`nil`) is given, any message is regarded as \"matched\"."
msgstr ""
"`input_message.pattern` ([マッチングパターン][matching pattern], 省略可能, 初期値=`nil`)\n"
": 入力メッセージに対する[マッチングパターン][matching pattern]。\n"
"  パターンが指定されていない（もしくは`nil`が指定された）場合は、すべてのメッセージがマッチします。"

msgid ""
"`output_message.pattern` ([matching pattern][], optional, default=`nil`)\n"
": A [matching pattern][] for outgoing messages.\n"
"  If no pattern (`nil`) is given, any message is regarded as \"matched\"."
msgstr ""
"`output_message.pattern` ([マッチングパターン][matching pattern], 省略可能, 初期値=`nil`)\n"
": 出力メッセージに対する[マッチングパターン][matching pattern]。\n"
"  パターンが指定されていない（もしくは`nil`が指定された）場合は、すべてのメッセージがマッチします。"

msgid "## Classes and methods {#classes}"
msgstr "## クラスとメソッド {#classes}"

msgid "### `Droonga::Adapter` {#classes-Droonga-Adapter}"
msgstr ""

msgid ""
"This is the common base class of any adapter. Your plugin's adapter class must"
" inherit this."
msgstr "これはすべてのアダプターに共通の基底クラスです。独自プラグインのアダプタークラスは、このクラスを継承する必要があります。"

msgid "#### `#adapt_input(input_message)` {#classes-Droonga-Adapter-adapt_input}"
msgstr ""

msgid ""
"This method receives a [`Droonga::InputMessage`](#classes-Droonga-InputMessage"
") wrapped incoming message.\n"
"You can modify the incoming message via its methods."
msgstr ""
"このメソッドは、[`Droonga::InputMessage`](#classes-Droonga-InputMessage)でラップされた入力メッセージ"
"を受け取ります。\n"
"入力メッセージは、メソッドを通じて内容を変更することができます。"

msgid ""
"In this base class, this method is defined as just a placeholder and it does n"
"othing.\n"
"To modify incoming messages, you have to override it by yours, like following:"
msgstr ""
"この基底クラスにおいて、このメソッドは何もしない単なるプレースホルダとして定義されています。\n"
"入力メッセージを変更するには、以下のようにメソッドを再定義して下さい："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::QueryFixer\n"
"  class Adapter < Droonga::Adapter\n"
"    def adapt_input(input_message)\n"
"      input_message.body[\"query\"] = \"fixed query\"\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "#### `#adapt_output(output_message)` {#classes-Droonga-Adapter-adapt_output}"
msgstr ""

msgid ""
"This method receives a [`Droonga::OutputMessage`](#classes-Droonga-OutputMessa"
"ge) wrapped outgoing message.\n"
"You can modify the outgoing message via its methods."
msgstr ""
"このメソッドは、[`Droonga::OutputMessage`](#classes-Droonga-OutputMessage)でラップされた出力メッセ"
"ージを受け取ります。\n"
"出力メッセージは、メソッドを通じて内容を変更することができます。"

msgid ""
"In this base class, this method is defined as just a placeholder and it does n"
"othing.\n"
"To modify outgoing messages, you have to override it by yours, like following:"
msgstr ""
"この基底クラスにおいて、このメソッドは何もしない単なるプレースホルダとして定義されています。\n"
"出力メッセージを変更するには、以下のようにメソッドを再定義して下さい："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::ErrorConcealer\n"
"  class Adapter < Droonga::Adapter\n"
"    def adapt_output(output_message)\n"
"      output_message.status_code = Droonga::StatusCode::OK\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "### `Droonga::InputMessage` {#classes-Droonga-InputMessage}"
msgstr ""

msgid "#### `#type`, `#type=(type)` {#classes-Droonga-InputMessage-type}"
msgstr ""

msgid "This returns the `\"type\"` of the incoming message."
msgstr "入力メッセージの`\"type\"`の値を返します。"

msgid "You can override it by assigning a new string value, like:"
msgstr "以下のように、新しい文字列値を代入することで値を変更できます："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MySearch\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"my-search\"]"
msgstr ""

msgid ""
"    def adapt_input(input_message)\n"
"      p input_message.type\n"
"      # => \"my-search\"\n"
"      #    This message will be handled by a plugin\n"
"      #    for the custom \"my-search\" type."
msgstr ""
"    def adapt_input(input_message)\n"
"      p input_message.type\n"
"      # => \"my-search\"\n"
"      #    このメッセージは「my-search」というメッセージタイプに\n"
"      #    対応したプラグインによって処理される。"

msgid "      input_message.type = \"search\""
msgstr ""

msgid ""
"      p input_message.type\n"
"      # => \"search\"\n"
"      #    The messge type (type) is changed.\n"
"      #    This message will be handled by the \"search\" plugin,\n"
"      #    as a regular search request.\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"      p input_message.type\n"
"      # => \"search\"\n"
"      #    メッセージタイプが変更された。\n"
"      #    このメッセージはsearchプラグインによって、\n"
"      #    通常の検索リクエストとして処理される。\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "#### `#body`, `#body=(body)` {#classes-Droonga-InputMessage-body}"
msgstr ""

msgid "This returns the `\"body\"` of the incoming message."
msgstr "入力メッセージの`\"body\"`の値を返します。"

msgid "You can override it by assigning a new value, partially or fully. For example:"
msgstr "以下のように、新しい値を代入したり部分的に値を代入したりすることで、値を変更することができます："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MinimumLimit\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid "    MAXIMUM_LIMIT = 10"
msgstr ""

msgid ""
"    def adapt_input(input_message)\n"
"      input_message.body[\"queries\"].each do |name, query|\n"
"        query[\"output\"] ||= {}\n"
"        query[\"output\"][\"limit\"] ||= MAXIMUM_LIMIT\n"
"        query[\"output\"][\"limit\"] = [query[\"output\"][\"limit\"], MAXIMUM_LIMIT].m"
"in\n"
"      end\n"
"      # Now, all queries have \"output.limit=10\".\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"    def adapt_input(input_message)\n"
"      input_message.body[\"queries\"].each do |name, query|\n"
"        query[\"output\"] ||= {}\n"
"        query[\"output\"][\"limit\"] ||= MAXIMUM_LIMIT\n"
"        query[\"output\"][\"limit\"] = [query[\"output\"][\"limit\"], MAXIMUM_LIMIT].m"
"in\n"
"      end\n"
"      # この時点で、すべての検索クエリが\"output.limit=10\"の指定を持っている。\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "Another case:"
msgstr "別の例："

msgid ""
"    def adapt_input(input_message)\n"
"      # Extract the query string from the custom type message.\n"
"      query_string = input_message[\"body\"][\"query\"]"
msgstr ""
"    def adapt_input(input_message)\n"
"      # 独自形式のメッセージからクエリ文字列を取り出す。\n"
"      query_string = input_message[\"body\"][\"query\"]"

msgid ""
"      # Construct internal search request for the \"search\" type.\n"
"      input_message.type = \"search\"\n"
"      input_message.body = {\n"
"        \"queries\" => {\n"
"          \"source\"    => \"Store\",\n"
"          \"condition\" => {\n"
"            \"query\"   => query_string,\n"
"            \"matchTo\" => [\"name\"],\n"
"          },\n"
"          \"output\" => {\n"
"            \"elements\" => [\"records\"],\n"
"            \"limit\"    => 10,\n"
"          },\n"
"        },\n"
"      }\n"
"      # Now, both \"type\" and \"body\" are completely replaced.\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"      # \"search\"型の内部的な検索リクエストを組み立てる。\n"
"      input_message.type = \"search\"\n"
"      input_message.body = {\n"
"        \"queries\" => {\n"
"          \"source\"    => \"Store\",\n"
"          \"condition\" => {\n"
"            \"query\"   => query_string,\n"
"            \"matchTo\" => [\"name\"],\n"
"          },\n"
"          \"output\" => {\n"
"            \"elements\" => [\"records\"],\n"
"            \"limit\"    => 10,\n"
"          },\n"
"        },\n"
"      }\n"
"      # この時点で、\"type\"と\"body\"は両方とも完全に置き換えられている。\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "### `Droonga::OutputMessage` {#classes-Droonga-OutputMessage}"
msgstr ""

msgid ""
"#### `#status_code`, `#status_code=(status_code)` {#classes-Droonga-OutputMess"
"age-status_code}"
msgstr ""

msgid "This returns the `\"statusCode\"` of the outgoing message."
msgstr "出力メッセージの`\"statusCode\"`の値を返します。"

msgid "You can override it by assigning a new status code. For example:"
msgstr "以下のように、新しいステータスコードを代入することで値を変更できます："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::ErrorConcealer\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
"    def adapt_output(output_message)\n"
"      unless output_message.status_code == StatusCode::InternalServerError\n"
"        output_message.status_code = Droonga::StatusCode::OK\n"
"        output_message.body = {}\n"
"        output_message.errors = nil\n"
"        # Now any internal server error is ignored and clients\n"
"        # receive regular responses.\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"    def adapt_output(output_message)\n"
"      unless output_message.status_code == StatusCode::InternalServerError\n"
"        output_message.status_code = Droonga::StatusCode::OK\n"
"        output_message.body = {}\n"
"        output_message.errors = nil\n"
"        # この時点で、内部的なサーバーエラーはすべて無視されるため\n"
"        # クライアントは通常のレスポンスを受け取る事になる。\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "#### `#errors`, `#errors=(errors)` {#classes-Droonga-OutputMessage-errors}"
msgstr ""

msgid "This returns the `\"errors\"` of the outgoing message."
msgstr "出力メッセージの`\"errors\"`の値を返します。"

msgid ""
"You can override it by assigning new error information, partially or fully. Fo"
"r example:"
msgstr "以下のように、新しいエラー情報を代入したり値を部分的に書き換えたりする事ができます："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::ErrorExporter\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
"    def adapt_output(output_message)\n"
"      output_message.errors.delete(secret_database)\n"
"      # Delete error information from secret database"
msgstr ""
"    def adapt_output(output_message)\n"
"      output_message.errors.delete(secret_database)\n"
"      # 秘密のデータベースからのエラー情報を削除する。"

msgid ""
"      output_message.body[\"errors\"] = {\n"
"        \"records\" => output_message.errors.collect do |database, error|\n"
"          {\n"
"            \"database\" => database,\n"
"            \"error\" => error\n"
"          }\n"
"        end,\n"
"      }\n"
"      # Convert error informations to a fake search result named \"errors\".\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"      output_message.body[\"errors\"] = {\n"
"        \"records\" => output_message.errors.collect do |database, error|\n"
"          {\n"
"            \"database\" => database,\n"
"            \"error\" => error\n"
"          }\n"
"        end,\n"
"      }\n"
"      # エラー情報を、\"error\"という名前の擬似的な検索結果に変換する。\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "#### `#body`, `#body=(body)` {#classes-Droonga-OutputMessage-body}"
msgstr ""

msgid "This returns the `\"body\"` of the outgoing message."
msgstr "出力メッセージの`\"body\"`の値を返します。"

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::SponsoredSearch\n"
"  class Adapter < Droonga::Adapter\n"
"    input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
"    def adapt_output(output_message)\n"
"      output_message.body.each do |name, result|\n"
"        next unless result[\"records\"]\n"
"        result[\"records\"].unshift(sponsored_entry)\n"
"      end\n"
"      # Now all search results include sponsored entry.\n"
"    end"
msgstr ""
"    def adapt_output(output_message)\n"
"      output_message.body.each do |name, result|\n"
"        next unless result[\"records\"]\n"
"        result[\"records\"].unshift(sponsored_entry)\n"
"      end\n"
"      # これにより、すべての検索結果が広告エントリを含むようになる。\n"
"    end"

msgid ""
"    def sponsored_entry\n"
"      {\n"
"        \"title\"=> \"SALE!\",\n"
"        \"url\"=>   \"http://...\"\n"
"      }\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"  [matching pattern]: ../matching-pattern/\n"
"  [error handling]: ../error/"
msgstr ""
