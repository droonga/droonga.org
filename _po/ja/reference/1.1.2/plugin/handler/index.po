msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-11-30 23:19+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: API set for plugins on the handling phase\n"
"layout: en\n"
"---"
msgstr ""
"---\n"
"title: ハンドリング・フェーズでのプラグインAPI\n"
"layout: ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## Abstract {#abstract}"
msgstr "## 概要 {#abstract}"

msgid ""
"Each Droonga Engine plugin can have its *handler*.\n"
"On the handling phase, handlers can process a request and return a result."
msgstr ""
"各々のDroonga Engineプラグインは、それ自身のための*ハンドラー*を持つことができます。ハンドリング・フェーズでは、ハンドラーはリクエストを処理"
"して結果を返すことができます。"

msgid "### How to define a handler? {#howto-define}"
msgstr "### ハンドラーの定義の仕方 {#howto-define}"

msgid "For example, here is a sample plugin named \"foo\" with a handler:"
msgstr "例えば、「foo」という名前のプラグインにハンドラーを定義する場合は以下のようにします："

msgid ""
"~~~ruby\n"
"require \"droonga/plugin\""
msgstr ""

msgid ""
"module Droonga::Plugins::FooPlugin\n"
"  extend Plugin\n"
"  register(\"foo\")"
msgstr ""

msgid ""
"  define_single_step do |step|\n"
"    step.name = \"foo\"\n"
"    step.handler = :Handler\n"
"    step.collector = Collectors::And\n"
"  end"
msgstr ""

msgid ""
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      # operations to process a request\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      # リクエストを処理するための操作\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "Steps to define a handler:"
msgstr "ハンドラーを定義するための手順は以下の通りです："

msgid ""
" 1. Define a module for your plugin (ex. `Droonga::Plugins::FooPlugin`) and re"
"gister it as a plugin. (required)\n"
" 2. Define a \"single step\" corresponding to the handler you are going to imple"
"ment, via [`Droonga::SingleStepDefinition`](#class-Droonga-SingleStepDefinitio"
"n). (required)\n"
" 3. Define a handler class (ex. `Droonga::Plugins::FooPlugin::Handler`) inheri"
"ting [`Droonga::Handler`](#classes-Droonga-Handler). (required)\n"
" 4. Define handling logic for requests as [`#handle`](#classes-Droonga-Handler"
"-handle). (optional)"
msgstr ""
" 1. プラグイン用のモジュール（例：`Droonga::Plugins::FooPlugin`）を定義し、プラグインとして登録する。（必須）\n"
" 2. [`Droonga::SingleStepDefinition`](#class-Droonga-SingleStepDefinition)を使い、"
"実装しようとしているハンドラーに対応する「single step」を定義する。（必須）\n"
" 3. [`Droonga::Handler`](#classes-Droonga-Handler)を継承したハンドラークラス（例：`Droonga::Pl"
"ugins::FooPlugin::Handler`）を定義する。（必須）\n"
" 4. リクエストを処理する操作を[`#handle`](#classes-Droonga-Handler-handle)として定義する。（任意）\n"

msgid ""
"See also the [plugin development tutorial](../../../tutorial/plugin-developmen"
"t/handler/)."
msgstr "[プラグイン開発チュートリアル](../../../tutorial/plugin-development/handler/)も併せて参照して下さい。"

msgid "### How a handler works? {#how-works}"
msgstr "### ハンドラーはどのように操作するか {#how-works}"

msgid "A handler works like following:"
msgstr "ハンドラーは以下のように動作します："

msgid ""
" 1. The Droonga Engine starts.\n"
"    * Your custom steps are registered.\n"
"      Your custom handler classes also.\n"
"    * Then the Droonga Engine starts to wait for request messages.\n"
" 2. A request message is transferred from the adaption phase.\n"
"    Then, the processing phase starts.\n"
"    * The Droonga Engine finds a step definition from the message type.\n"
"    * The Droonga Engine builds a \"single step\" based on the registered defini"
"tion.\n"
"    * A \"single step\" creates an instance of the registered handler class.\n"
"      Then the Droonga Engine enters to the handling phase.\n"
"      * The handler's [`#handle`](#classes-Droonga-Handler-handle) is called w"
"ith a task massage including the request.\n"
"        * The method can process the given incoming message as you like.\n"
"        * The method returns a result value, as the output.\n"
"      * After the handler finishes, the handling phase for the task message (a"
"nd the request) ends.\n"
"    * If no \"step\" is found for the type, nothing happens.\n"
"    * All \"step\"s finish their task, the processing phase for the request ends"
"."
msgstr ""
" 1. Droonga Engineが起動する。\n"
"    * stepとハンドラークラスが登録される。\n"
"    * Droonga Engineが起動し、入力メッセージを待ち受ける。\n"
" 2. 適合フェーズからメッセージが転送されてくる。\n"
"    この時点で処理フェーズが開始される。\n"
"    * Droonga Engineが、メッセージタイプからstepの定義を見つける。\n"
"    * Droonga Engineが、登録済みの定義に従ってsingle stepを作成する。\n"
"    * single stepが、登録済みのハンドラークラスのインスタンスを作成する。\n"
"      この時点でハンドリング・フェーズが開始される。\n"
"      * ハンドラーの[`#handle`](#classes-Droonga-Handler-handle)メソッドが、リクエストの情報を含むタスク"
"メッセージを伴って呼ばれる。\n"
"        * このメソッドにより、入力メッセージを任意に処理することができる。\n"
"        * このメソッドは、処理結果の出力を戻り値として返す。\n"
"      * ハンドラーの処理が完了した時点で、そのタスクメッセージ（およびリクエスト）のハンドリング・フェーズが終了する。\n"
"    * メッセージタイプからstepが見つからなかった場合は、何も処理されない。\n"
"    * すべてのstepが処理を終えた時点で、そのリクエストに対する処理フェーズが終了する。"

msgid ""
"As described above, the Droonga Engine creates an instance of the handler clas"
"s for each request."
msgstr "上記の通り、Droonga Engineは各リクエストに対してその都度ハンドラークラスのインスタンスを生成します。"

msgid ""
"Any error raised from the handler is handled by the Droonga Engine itself. See"
" also [error handling][]."
msgstr ""
"ハンドラー内で発生したすべてのエラーは、Droonga Engine自身によって処理されます。[エラー処理][error handling]も併せて参照して"
"下さい。"

msgid "## Configurations {#config}"
msgstr "## 設定 {#config}"

msgid ""
"`action.synchronous` (boolean, optional, default=`false`)\n"
": Indicates that the request must be processed synchronously.\n"
"  For example, a request to define a new column in a table must be processed a"
"fter a request to define the table itself, if the table does not exist yet.\n"
"  Then handlers for these requests have the configuration `action.synchronous "
"= true`."
msgstr ""
"`action.synchronous` (真偽値, 省略可能, 初期値=`false`)\n"
": リクエストを同期的に処理する必要があるかどうかを示す。\n"
"  例えば、テーブル内に新しいカラムを追加するリクエストは、テーブルが存在しない場合には必ず、テーブル作成用のリクエストの後で処理する必要がある。このような"
"場合のハンドラーは、 `action.synchronous = true` の指定を伴うことになる。"

msgid "## Classes and methods {#classes}"
msgstr "## クラスとメソッド {#classes}"

msgid "### `Droonga::SingleStepDefinition` {#classes-Droonga-SingleStepDefinition}"
msgstr ""

msgid "This provides methods to describe the \"step\" corresponding to the handler."
msgstr "このクラスは、ハンドラーに対応するstepの詳細を記述する機能を提供します。"

msgid "#### `#name`, `#name=(name)` {#classes-Droonga-SingleStepDefinition-name}"
msgstr ""

msgid ""
"Describes the name of the step itself.\n"
"Possible value is a string."
msgstr "step自身の名前を記述します。値は文字列です。"

msgid ""
"The Droonga Engine treats an incoming message as a request of a \"command\", if "
"there is any step with the `name` which equals to the message's `type`.\n"
"In other words, this defines the name of the command corresponding to the step"
" itself."
msgstr ""
"Droonga Engineは、メッセージの`type`に一致する`name`を持つstepが存在する場合に、入力メッセージをコマンドのリクエストとして扱い"
"ます。\n"
"言い換えると、このメソッドはstepに対応するコマンドの名前を定義します。"

msgid ""
"#### `#handler`, `#handler=(handler)` {#classes-Droonga-SingleStepDefinition-h"
"andler}"
msgstr ""

msgid ""
"Associates a specific handler class to the step itself.\n"
"You can specify the class as any one of following choices:"
msgstr ""
"特定のハンドラークラスをstepに紐付けます。\n"
"ハンドラークラスは以下のいずれかの方法で指定します："

msgid ""
" * A reference to a handler class itself, like `Handler` or `Droonga::Plugins:"
":FooPlugin::Handler`.\n"
"   Of course, the class have to be already defined at the time.\n"
" * A symbol which refers the name of a handler class in the current namespace,"
" like `:Handler`.\n"
"   This is useful if you want to describe the step at first and define the act"
"ual class after that.\n"
" * A class path string of a handler class, like `\"Droonga::Plugins::FooPlugin:"
":Handler\"`.\n"
"   This is also useful to define the class itself after the description."
msgstr ""
" * `Handler` や `Droonga::Plugins::FooPlugin::Handler` のような、ハンドラークラス自体への参照。\n"
"   当然ながら、参照先のクラスはその時点で定義済みでなければなりません。\n"
" * `:Handler`のような、その名前空間で定義されているハンドラークラスのクラス名のシンボル。\n"
"   この記法は、stepを先に記述して後からハンドラークラスを定義する場合に有用です。\n"
" * `\"Droonga::Plugins::FooPlugin::Handler\"` のような、ハンドラークラスのクラスパス文字列。\n"
"   この記法もまた、stepの後でハンドラークラスを定義する場合に有用です。"

msgid ""
"You must define the referenced class by the time the Droonga Engine actually p"
"rocesses the step, if you specify the name of the handler class as a symbol or"
" a string.\n"
"If the Droonga Engine fails to find out the actual handler class, or no handle"
"r is specified, then the Droonga Engine does nothing for the request."
msgstr ""
"ハンドラークラスをシンボルまたは文字列で指定した場合、参照先のクラスは、Droonga Engineが実際にそのstepを処理する時点までの間に定義しておく"
"必要があります。\n"
"Droonga Engineがハンドラークラスの実体を見つけられなかった場合、またはハンドラークラスが未指定の場合には、Droonga Engineはそのリ"
"クエストに対して何も処理を行いません。"

msgid ""
"#### `#collector`, `#collector=(collector)` {#classes-Droonga-SingleStepDefini"
"tion-collector}"
msgstr ""

msgid ""
"Associates a specific collector class to the step itself.\n"
"You can specify the class as any one of following choices:"
msgstr ""
"特定のコレクタークラスをstepに紐付けます。\n"
"コレクタークラスは以下のいずれかの方法で指定します："

msgid ""
" * A reference to a collector class itself, like `Collectors::Something` or `D"
"roonga::Plugins::FooPlugin::MyCollector`.\n"
"   Of course, the class have to be already defined at the time.\n"
" * A symbol which refers the name of a collector class in the current namespac"
"e, like `:MyCollector`.\n"
"   This is useful if you want to describe the step at first and define the act"
"ual class after that.\n"
" * A class path string of a collector class, like `\"Droonga::Plugins::FooPlugi"
"n::MyCollector\"`.\n"
"   This is also useful to define the class itself after the description."
msgstr ""
" * `Collectors::Something` や `Droonga::Plugins::FooPlugin::MyCollector` のような、コ"
"レクタークラス自体への参照。\n"
"   当然ながら、参照先のクラスはその時点で定義済みでなければなりません。\n"
" * `:MyCollector`のような、その名前空間で定義されているコレクタークラスのクラス名のシンボル。\n"
"   この記法は、stepを先に記述して後からコレクタークラスを定義する場合に有用です。\n"
" * `\"Droonga::Plugins::FooPlugin::MyCollector\"` のような、コレクタークラスのクラスパス文字列。\n"
"   この記法もまた、stepの後でコレクタークラスを定義する場合に有用です。"

msgid ""
"You must define the referenced class by the time the Droonga Engine actually c"
"ollects results, if you specify the name of the collector class as a symbol or"
" a string.\n"
"If the Droonga Engine fails to find out the actual collector class, or no coll"
"ector is specified, then the Droonga Engine doesn't collect results and return"
"s multiple messages as results."
msgstr ""
"コレクタークラスをシンボルまたは文字列で指定した場合、参照先のクラスは、Droonga Engineが実際にそのstepの結果を集約する時点までの間に定義し"
"ておく必要があります。\n"
"Droonga Engineがコレクタークラスの実体を見つけられなかった場合、またはコレクタークラスが未指定の場合には、Droonga Engineは処理結"
"果を集約せず、複数のメッセージとして返します。"

msgid "See also [descriptions of collectors][collector]."
msgstr "[コレクターの説明][collector]も併せて参照して下さい。"

msgid "#### `#write`, `#write=(write)` {#classes-Droonga-SingleStepDefinition-write}"
msgstr ""

msgid ""
"Describes whether the step modifies any data in the storage or don't.\n"
"If a request aims to modify some data in the storage, the request must be proc"
"essed for all replicas.\n"
"Otherwise the Droonga Engine can optimize handling of the step.\n"
"For example, caching of results, reducing of CPU/memory usage, and so on."
msgstr ""
"stepがストレージ内の情報を変更し得るかどうかを記述します。\n"
"リクエストがストレージ内のデータを変更することを意図する物である場合、そのリクエストはすべてのreplicaで処理される必要があります。\n"
"それ以外の場合、Droonga Engineは結果をキャッシュしたり、CPUやメモリの使用量を削減するなどして、処理を最適化することができます。"

msgid "Possible values are:"
msgstr "取り得る値："

msgid ""
" * `true`, means \"this step can modify the storage.\"\n"
" * `false`, means \"this step never modifies the storage.\" (default)"
msgstr ""
" * `true`： そのstepではストレージの内容が変更される可能性がある事を示す。\n"
" * `false`： そのstepではストレージの内容が変更される可能性はない事を示す。（初期値）\""

msgid ""
"#### `#inputs`, `#inputs=(inputs)` {#classes-Droonga-SingleStepDefinition-inpu"
"ts}"
msgstr ""

msgid "(TBD)"
msgstr "（未稿）"

msgid ""
"#### `#output`, `#output=(output)` {#classes-Droonga-SingleStepDefinition-outp"
"ut}"
msgstr ""

msgid "### `Droonga::Handler` {#classes-Droonga-Handler}"
msgstr ""

msgid ""
"This is the common base class of any handler.\n"
"Your plugin's handler class must inherit this."
msgstr "これはすべてのハンドラーに共通の基底クラスです。独自プラグインのハンドラークラスは、このクラスを継承する必要があります。"

msgid "#### `#handle(message)` {#classes-Droonga-Handler-handle}"
msgstr ""

msgid ""
"This method receives a [`Droonga::HandlerMessage`](#classes-Droonga-HandlerMes"
"sage) wrapped task message.\n"
"You can read the request information via its methods."
msgstr ""
"このメソッドは、[`Droonga::HandlerMessage`](#classes-Droonga-HandlerMessage)でラップされたタスク"
"メッセージを受け取ります。\n"
"プラグインは、このタスクメッセージのメソッドからリクエストの情報を読み取る事ができます。"

msgid ""
"In this base class, this method is defined as just a placeholder and it does n"
"othing.\n"
"To process messages, you have to override it by yours, like following:"
msgstr ""
"この基底クラスにおいて、このメソッドは何もしない単なるプレースホルダとして定義されています。\n"
"メッセージを処理するには、以下のようにメソッドを再定義して下さい："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MySearch\n"
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      search_query = message.request[\"body\"][\"query\"]\n"
"      ...\n"
"      { ... } # the result\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"The Droonga Engine uses the returned value of this method as the result of the"
" handling.\n"
"It will be used to build the body of the unified response, and delivered to th"
"e Protocol Adapter."
msgstr ""
"Droonga Engineは、このメソッドの戻り値を処理の結果として扱います。\n"
"結果の値は、レスポンスのbodyの組み立てに使われ、Protocol Adapterに送られます。"

msgid "### `Droonga::HandlerMessage` {#classes-Droonga-HandlerMessage}"
msgstr ""

msgid "This is a wrapper for a task message."
msgstr "このクラスはタスクメッセージに対するラッパーとして働きます。"

msgid ""
"The Droonga Engine analyzes a transferred request message, and build multiple "
"task massages to process the request.\n"
"A task massage has some information: a request, a step, descendant tasks, and "
"so on."
msgstr ""
"Droonga Engineは送られてきたリクエストのメッセージを解析し、そのリクエストを処理するための複数のタスクメッセージを作成します。\n"
"1つのタスクメッセージは、リクエストの実体、step、後続するタスクの一覧などの情報を持ちます。"

msgid "#### `#request` {#classes-Droonga-HandlerMessage-request}"
msgstr ""

msgid ""
"This returns the request message.\n"
"You can read request body via this method. For example:"
msgstr "このメソッドはリクエストメッセージを返します。例："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::MySearch\n"
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      request = message.request\n"
"      search_query = request[\"body\"][\"query\"]\n"
"      ...\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "#### `@context` {#classes-Droonga-HandlerMessage-context}"
msgstr ""

msgid ""
"This is a reference to the `Groonga::Context` instance for the storage of the "
"corresponding volume.\n"
"See the [class reference of Rroonga][Groonga::Context]."
msgstr ""
"対応するボリュームのストレージを示す、`Groonga::Context`のインスタンスへの参照。\n"
"[Rroongaのクラスリファレンス][Groonga::Context]も併せて参照して下さい"

msgid ""
"You can use any feature of Rroonga via `@context`.\n"
"For example, this code returns the number of records in the specified table:"
msgstr ""
"`@context`を経由して、Rroongaのすべての機能を利用できます。\n"
"例えば、以下は指定されたテーブルのすべてのレコードの数を返す例です："

msgid ""
"~~~ruby\n"
"module Droonga::Plugins::CountRecords\n"
"  class Handler < Droonga::Handler\n"
"    def handle(message)\n"
"      request = message.request\n"
"      table_name = request[\"body\"][\"table\"]\n"
"      count = @context[table_name].size\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"  [error handling]: ../error/\n"
"  [collector]: ../collector/\n"
"  [Groonga::Context]: http://ranguba.org/rroonga/en/Groonga/Context.html"
msgstr ""
