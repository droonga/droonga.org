msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-11-30 23:19+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: \"Droonga tutorial: Getting started/How to migrate from Groonga?\"\n"
"layout: en\n"
"---"
msgstr ""
"---\n"
"title: \"Droongaチュートリアル: 使ってみる/Groongaからの移行手順\"\n"
"layout: ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## The goal of this tutorial"
msgstr "## チュートリアルのゴール"

msgid ""
"Learning steps to run a Droonga cluster by your hand, and use it as a [Groonga"
"][groonga] compatible server."
msgstr "Droongaクラスタを自分で構築して、[Groonga][groonga]互換のサーバとして利用できるようにするための手順を学ぶこと。"

msgid "## Precondition"
msgstr "## 前提条件"

msgid ""
"* You must have basic knowledge and experiences to set up and operate an [Ubun"
"tu][] or [CentOS][] Server.\n"
"* You must have basic knowledge and experiences to use the [Groonga][groonga] "
"via HTTP."
msgstr ""
"* [Ubuntu][]または[CentOS][]サーバのセットアップと操作について、基本的な知識と経験があること。\n"
"* [Groonga][groonga]のHTTP経由での利用について、基本的な知識と経験があること。"

msgid "## What's Droonga?"
msgstr "## Droongaとは何か？"

msgid ""
"It is a data processing engine based on a distributed architecture, named afte"
"r the terms \"distributed-Groonga\".\n"
"As its name suggests, it can work as a Groonga compatible server with some imp"
"rovements - replication and sharding."
msgstr ""
"Droongaは分散アーキテクチャに基づくデータ処理エンジンで、「distributed-Groonga」がその名の由来です。\n"
"名前が示す通り、Droongaはいくつかの点での改善（具体的には、レプリケーションとシャーディング）を含んだGroonga互換のサーバとして動作することがで"
"きます。"

msgid ""
"In a certain sense, the Droonga is quite different from Groonga, about its arc"
"hitecture, design, API etc.\n"
"However, you don't have to understand the whole architecture of the Droonga, i"
"f you simply use it just as a Groonga compatible server."
msgstr ""
"アーキテクチャ、設計、APIなどの点で、DroongaはGroongaと大きく異なっています。\n"
"しかしながら、Droongaを単にGroonga互換のサーバとして使う限りにおいては、Droongaのアーキテクチャ全体を理解する必要はありません。"

msgid ""
"For example, let's try to build a database system to find [Starbucks stores in"
" New York](http://geocommons.com/overlays/430038)."
msgstr ""
"例として、[ニューヨークにあるスターバックスの店舗](http://geocommons.com/overlays/430038)を検索できるデータベースシ"
"ステムを作成することにします。"

msgid "## Set up a Droonga cluster"
msgstr "## Droongaクラスタをセットアップする"

msgid ""
"A database system based on the Droonga is called *Droonga cluster*.\n"
"This section describes how to set up a Droonga cluster from scratch."
msgstr ""
"Droongaベースのデータベースシステムは、*Droongaクラスタ*と呼ばれます。\n"
"この節では、Droongaクラスタを0から構築する方法を解説します。"

msgid "### Prepare computers for Droonga nodes"
msgstr "### Droongaノード用のコンピュータを用意する"

msgid ""
"A Droonga cluster is constructed from one or more computers, called *Droonga n"
"ode*(s).\n"
"Prepare computers for Droonga nodes at first."
msgstr ""
"Droongaクラスタは、*Droongaノード*と呼ばれる1つ以上のコンピュータによって構成されます。\n"
"まず、Droongaノードにするためのコンピュータを用意しましょう。"

msgid ""
"This tutorial describes steps to set up Droonga cluster based on existing comp"
"uters.\n"
"Following instructions are basically written for a successfully prepared virtu"
"al machine of the `Ubuntu 14.04 x64` or `CentOS 7 x64` on the service [Digital"
"Ocean](https://www.digitalocean.com/), with an available console."
msgstr ""
"このチュートリアルは、既存のコンピュータを使ってDroongaクラスタを構築する手順について解説しています。\n"
"以下の説明は基本的には、[DigitalOcean](https://www.digitalocean.com/)上のサーバで`Ubuntu 14.04 x"
"64`または`CentOS 7 x64`の仮想マシンが正しく準備されており、コンソールが利用できる状態になっている、という前提に基づいています。"

msgid ""
"If you just want to try Droong casually, see another tutorial: [how to prepare"
" multiple virtual machines on your own computer](../virtual-machines-for-exper"
"iments/)."
msgstr ""
"単にDroongaを試したいだけの場合は、[自分のコンピュータ上に複数台の仮想マシンを用意する手順の解説](../virtual-machines-for-"
"experiments/)も参照してみて下さい。"

msgid "NOTE:"
msgstr "注意:"

msgid ""
" * Make sure to use instances with >= 2GB memory equipped, at least during ins"
"tallation of required packages for Droonga.\n"
"   Otherwise, you possibly experience a strange build error.\n"
" * Make sure the hostname reported by `hostname -f` or the IP address reported"
" by `hostname -i` is accessible from each other computer in your cluster.\n"
" * Make sure that commands `curl` and `jq` are installed in your computers.\n"
"   `curl` is required to download installation scripts.\n"
"   `jq` is not required for installation, but it will help you to read respons"
"e JSONs returned from Droonga."
msgstr ""
" * Droongaの依存パッケージをインストールする前に、仮想マシンのインスタンスが少なくとも2GB以上のメモリを備えていることを確認して下さい。\n"
"   メモリが足りないと、パッケージのインストール中にネイティブ拡張のビルドに失敗する場合があります。\n"
" * `hostname -f`で報告されるホスト名、または`hostname -i`で報告されるIPアドレスが、クラスタ内の他のコンピュータからアクセス可"
"能なものであることを確認して下さい。\n"
" * `curl`コマンドと`jq`コマンドがインストールされていることを確認して下さい。\n"
"   `curl`はインストールスクリプトをダウンロードするために必要です。\n"
"   `jq`はインストールのためには必要ではありませんが、Droongaが返却するJSON形式のレスポンスを読むのに役立つでしょう。"

msgid ""
"You need to prepare two or more nodes for effective replication.\n"
"So this tutorial assumes that you have two computers:"
msgstr ""
"有効なレプリケーションを実現するためには2台以上のコンピュータを用意する必要があります。\n"
"ですので、このチュートリアルでは以下のような2台のコンピュータがあると仮定して説明を進めます:"

msgid ""
" * has an IP address `192.168.100.50`, with a host name `node0`.\n"
" * has an IP address `192.168.100.51`, with a host name `node1`."
msgstr ""
" * IPアドレスが`192.168.100.50`で、ホスト名が`node0`であるコンピュータ。\n"
" * IPアドレスが`192.168.100.51`で、ホスト名が`node1`であるコンピュータ。"

msgid "### Set up computers as Droonga nodes"
msgstr "## コンピュータをDroongaノードとしてセットアップする"

msgid ""
"Groonga provides binary packages and you can install Groonga easily, for some "
"environments.\n"
"(See: [how to install Groonga](http://groonga.org/docs/install.html))"
msgstr ""
"Groongaはバイナリのパッケージを提供しているため、環境によっては簡単にインストールできます。\n"
"（[Groongaのインストール手順](http://groonga.org/docs/install.html)を参照）"

msgid "On the other hand, steps to set up a computer as a Droonga node are:"
msgstr "それに対し、コンピュータをDroongaノードとしてセットアップする手順は以下の通りです:"

msgid ""
" 1. Install the `droonga-engine`.\n"
" 2. Install the `droonga-http-server`.\n"
" 3. Configure the node to work together with other nodes."
msgstr ""
" 1. `droonga-engine`をインストールする。\n"
" 2. `droonga-http-server`をインストールする。\n"
" 3. そのノードを他のノードと協調して動作するように設定する。"

msgid ""
"Note that you must do all steps on each computer.\n"
"However, they're very simple."
msgstr ""
"上記の手順を各コンピュータに対して実施する必要があることに注意して下さい。\n"
"しかしながら、各手順は非常に簡単です。"

msgid ""
"Let's log in to the computer `node0` (`192.168.100.50`), and install Droonga c"
"omponents."
msgstr "それでは、`node0` (`192.168.100.50`)にログインしてDroongaの構成コンポーネントをインストールしましょう。"

msgid ""
"First, install the `droonga-engine`.\n"
"It is the core component provides most features of Droonga system.\n"
"Download the installation script and run it by `bash` as the root user:"
msgstr ""
"まず、`droonga-engine`をインストールします。\n"
"これはDroongaシステムの主要な機能を提供する、核となるコンポーネントです。\n"
"インストールスクリプトをダウンロードし、root権限で`bash`で実行して下さい:"

msgid ""
"~~~\n"
"# curl https://raw.githubusercontent.com/droonga/droonga-engine/master/install"
".sh | \\\n"
"    bash\n"
"...\n"
"Installing droonga-engine from RubyGems...\n"
"...\n"
"Preparing the user...\n"
"...\n"
"Setting up the configuration directory...\n"
"This node is configured with a hostname XXXXXXXX."
msgstr ""

msgid ""
"Registering droonga-engine as a service...\n"
"...\n"
"Successfully installed droonga-engine.\n"
"~~~"
msgstr ""

msgid ""
"Note, The name of the node itself (guessed from the host name of the computer)"
" appears in the message.\n"
"*It is used in various situations*, so *don't forget what is the name of each "
"node*."
msgstr ""
"そのノード自身の名前（コンピュータのホスト名から推測されたもの）がメッセージの中に出力されていることに注意して下さい。\n"
"*この名前は様々な場面で使われます*ので、*各ノードの名前が何であるかを忘れないようにして下さい*。"

msgid ""
"Second, install the `droonga-http-server`.\n"
"It is the frontend component required to translate HTTP requests to Droonga's "
"native one.\n"
"Download the installation script and run it by `bash` as the root user:"
msgstr ""
"次に、`droonga-http-server`をインストールします。\n"
"これはHTTPのリクエストをDroongaネイティブのリクエストに変換するために必要な、フロントエンドとなるコンポーネントです。\n"
"インストールスクリプトをダウンロードし、root権限で`bash`で実行して下さい:"

msgid ""
"~~~\n"
"# curl https://raw.githubusercontent.com/droonga/droonga-http-server/master/in"
"stall.sh | \\\n"
"    bash\n"
"...\n"
"Installing droonga-http-server from npmjs.org...\n"
"...\n"
"Preparing the user...\n"
"...\n"
"Setting up the configuration directory...\n"
"The droonga-engine service is detected on this node.\n"
"The droonga-http-server is configured to be connected\n"
"to this node (XXXXXXXX).\n"
"This node is configured with a hostname XXXXXXXX."
msgstr ""

msgid ""
"Registering droonga-http-server as a service...\n"
"...\n"
"Successfully installed droonga-http-server.\n"
"~~~"
msgstr ""

msgid ""
"After that, do same operations on another computer `node1` (`192.168.100.51`) "
"also.\n"
"Then two computers successfully prepared to work as Droonga nodes."
msgstr ""
"ここまでの操作が終わったら、同じ操作をもう1台のコンピュータ `node1` (`192.168.100.51`) に対しても行います。\n"
"これで、無事に2台のコンピュータをDroongaノードとして動作させるための準備が整いました。"

msgid ""
"### When your computers don't have a host name accessible from other computers"
"... {#accessible-host-name}"
msgstr "### コンピュータが他のコンピュータからアクセスできるホスト名を持っていない場合…… {#accessible-host-name}"

msgid ""
"Each Droonga node must know the *accessible host name* of the node itself, to "
"communicate with other nodes."
msgstr "各Droongaノードは、他のノードと通信するために、そのノード自身の*アクセス可能な名前*を把握している必要があります。"

msgid ""
"The installation script guesses accessible host name of the node automatically"
".\n"
"You can confirm what value is detected as the host name of the node itself, by"
" following command:"
msgstr ""
"インストールスクリプトはそのノードのアクセス可能なホスト名を自動的に推測します。\n"
"どのような値がそのノード自身のホスト名として認識されたかは、以下の手順で確認できます:"

msgid ""
"~~~\n"
"# cat ~droonga-engine/droonga/droonga-engine.yaml | grep host\n"
"host: XXXXXXXX\n"
"~~~"
msgstr ""

msgid ""
"However it may be misdetected if the computer is not configured properly.\n"
"For example, even if a node is configured with a host name `node0`, it cannot "
"receive any message from other nodes when others cannot resolve the name `node"
"0` to actual IP address."
msgstr ""
"しかしながら、そのコンピュータが適切に設定されていないと、この自動認識に失敗することがあります。\n"
"例えば、そのノードのホスト名が`node0`であると設定されているにも関わらず、他のノードが`node0`というホスト名から実際のIPアドレスを名前解決でき"
"ないと、そのノードは他のノードから送られてくるメッセージを何も受信することができません。"

msgid ""
"Then you have to reconfigure your node with raw IP addresse of the node itself"
", like:"
msgstr "そのような場合、以下のようにして、そのノード自身のIPアドレスを使ってノードを再設定する必要があります:"

msgid ""
"~~~\n"
"(on node0=192.168.100.50)\n"
"# host=192.168.100.50\n"
"# droonga-engine-configure --quiet --reset-config --reset-catalog \\\n"
"                           --host=$host\n"
"# droonga-http-server-configure --quiet --reset-config \\\n"
"                                --droonga-engine-host-name=$host \\\n"
"                                --receive-host-name=$host"
msgstr ""

msgid ""
"(on node1=192.168.100.51)\n"
"# host=192.168.100.51\n"
"...\n"
"~~~"
msgstr ""

msgid ""
"Then your computer `node0` is configured as a Droonga node with the host name "
"`192.168.100.50`, and `node1` becomes a node with the name `192.168.100.51`.\n"
"As said before, *the configured name is used in various situations*, so *don't"
" forget what is the name of each node*."
msgstr ""
"この操作により、コンピュータ `node0` は `192.168.100.50` というホスト名のDroongaノード、コンピュータ `node1` は "
"`192.168.100.51` というホスト名のDroongaノードとして設定されます。\n"
"前述した通り、*ここで設定された名前は様々な場面で使われます*ので、*各ノードの名前が何であるかを忘れないようにして下さい*。"

msgid ""
"This tutorial assumes that all your computers can resolve each other host name"
" `node0` and `node1` correctly.\n"
"Otherwise, read host names `node0` and `node1` in following instructions, as r"
"aw IP addresses like `192.168.100.50` and `192.168.100.51`."
msgstr ""
"このチュートリアルでは、各コンピュータはお互いのホスト名`node0`と`node1`を正しく名前解決できるものと仮定します。\n"
"あなたの環境ではホスト名の解決ができないという場合には、以下の説明の中の`node0`と`node1`は、実際のIPアドレス（例えば`192.168.100"
".50`と`192.168.100.51`）に読み替えて下さい。"

msgid ""
"By the way, you can specify your favorite value as the host name of the comput"
"er itself via environment variables, for the installation script, like:"
msgstr "ちなみに、インストールスクリプトに対しても、以下のように、環境変数を使って任意の値をホスト名として指定することができます:"

msgid ""
"~~~\n"
"(on node0=192.168.100.50)\n"
"# host=192.168.100.50\n"
"# curl https://raw.githubusercontent.com/droonga/droonga-engine/master/install"
".sh | \\\n"
"    HOST=$host bash\n"
"# curl https://raw.githubusercontent.com/droonga/droonga-http-server/master/in"
"stall.sh | \\\n"
"    ENGINE_HOST=$host HOST=$host bash"
msgstr ""

msgid ""
"This option will help you, if you already know that your computers are not con"
"figured to resolve each other name."
msgstr "この方法は、使おうとしているコンピュータがお互いのホスト名を名前解決できないことがあらかじめ分かっている場合に便利でしょう。"

msgid "### Configure nodes to work together as a cluster"
msgstr "### 各ノードをクラスタとして動作するように設定する"

msgid ""
"Currently, these nodes are still individual nodes.\n"
"Let's configure them to work together as a cluster."
msgstr ""
"現時点で、これらのノードはまだ個別に動作する状態になっています。\n"
"それでは、これらを1つのクラスタとして動作するように設定しましょう。"

msgid "Run commands like this, on each node:"
msgstr "以下のようなコマンドを各ノードで実行して下さい:"

msgid ""
"~~~\n"
"# droonga-engine-catalog-generate --hosts=node0,node1\n"
"~~~"
msgstr ""

msgid ""
"Of course you must specify correct host name of nodes by the `--hosts` option."
"\n"
"If your nodes are configured with raw IP addresses, the command line is:"
msgstr ""
"当然ながら、`--hosts`オプションには各ノードの正しいホスト名を指定する必要があります。\n"
"もしこれらのノードがIPアドレスをホスト名として設定されている場合には、コマンド列は以下のようになります:"

msgid ""
"~~~\n"
"# droonga-engine-catalog-generate --hosts=192.168.100.50,192.168.100.51\n"
"~~~"
msgstr ""

msgid ""
"OK, now your Droonga cluster is correctly prepared.\n"
"Two nodes are configured to work together as a Droonga cluster."
msgstr ""
"これで、Droongaクラスタの準備が完了しました。\n"
"2つのノードは1つのDroongaクラスタとして動作するための準備が完了しています。"

msgid "Let's continue to [the next step, \"how to use the cluster\"](#use)."
msgstr "引き続き、[クラスタの使い方の説明](#use)に進みましょう。"

msgid "## Use the Droonga cluster, via HTTP (and its native protocol) {#use}"
msgstr "## DroongaクラスタをHTTP経由（およびネイティブプロトコル）で使用する {#use}"

msgid ""
"There are two different interfaces to communicate with a Droonga cluster: HTTP"
" and Droonga's native protocol (same to fluentd's one)."
msgstr ""
"Droongaクラスタと通信する方法としては、HTTPとDroongaネイティブプロトコル（fluentdのプロトコルと同じ物）の2つの異なるインターフェー"
"スがあります。"

msgid ""
" * HTTP interface is useful for Web applications.\n"
"   If your application is based on Groonga with its HTTP interface, it can mig"
"rate to Droonga easily.\n"
" * The native protocol has better performance, but difficult to use a little.\n"
"   However, there are a client library and command line utilities supporting i"
"t."
msgstr ""
" * HTTPインターフェースは、Webアプリケーションから利用しやすいです。\n"
"   もしあなたのWebアプリケーションがGroongaのHTTPインターフェースを利用して開発されているのであれば、Droongaに簡単に移行できます。\n"
" * ネイティブプロトコルはパフォーマンスが比較的良いですが、使い方が少し難しいです。\n"
"   しかし、クライアントライブラリや支援用のコマンドラインユーティリティがあります。"

msgid "This section's instructions are mainly based on HTTP."
msgstr "このセクションでの説明は、主にHTTPでの使い方について述べます。"

msgid "### Start and stop services on each Droonga node"
msgstr "### 各Droongaノードの上でのサービスの開始と停止"

msgid "You can run Groonga as an HTTP server daemon with the option `-d`, like:"
msgstr "GroongaをHTTPサーバとして使う場合は、以下のように `-d` オプションを指定するだけでサーバを起動できます："

msgid ""
"~~~\n"
"# groonga -p 10041 -d --protocol http /tmp/databases/db\n"
"~~~"
msgstr ""

msgid ""
"On the other hand, you have to run multiple server daemons for each Droonga no"
"de to use your Droonga cluster via HTTP."
msgstr "一方、DroongaクラスタをHTTP経由で使うためには、各Droongaノードにおいて複数のサーバ・デーモンを起動する必要があります。"

msgid ""
"If you set up your Droonga nodes by installation scripts, daemons are already "
"been configured as system services managed via the `service` command.\n"
"To start them, run commands like following on each Droonga node:"
msgstr ""
"Droongaノードをインストールスクリプトを使ってセットアップした場合、デーモンは既に、`service`コマンドによって管理されるシステムのサービスとし"
"て設定されています。\n"
"サービスを起動するには、以下のようなコマンドを各Droongaノードで実行して下さい:"

msgid ""
"~~~\n"
"# service droonga-engine start\n"
"# service droonga-http-server start\n"
"~~~"
msgstr ""

msgid ""
"By these commands, services start to work.\n"
"Now two nodes construct a cluster and they monitor each other.\n"
"If one of nodes dies and there is any still alive node, survivor(s) will work "
"as the Droonga cluster.\n"
"Then you can recover the dead node and re-join it to the cluster secretly."
msgstr ""
"これらのコマンドにより、各サービスが動作し始めます。\n"
"これで、2つのノードは1つのクラスタを形成し、お互いの状態を監視し合う状態になりました。\n"
"もしノードが1つ停止しても、他のノードが生存していれば、それらの生存ノードだけでDroongaクラスタは動作し続けます。\n"
"ですので、秘密裏のうちに機能停止したノードを復旧したりクラスタに復帰させたりすることができます。"

msgid ""
"Important note: both `droonga-engine` and `droonga-http-server` resolve depend"
"encies automatically on the startup.\n"
"For example, they download [Serf](https://www.serfdom.io/)'s binary.\n"
"After all dependencies are resolved, they start working.\n"
"So, you may have to wait for a while, on the initial startup."
msgstr ""
"重要な注意事項：`droonga-engine`と`droonga-http-server`のどちらも、起動時に自動的に依存性を解決するようになっています。"
"\n"
"例えば、これらは[Serf](https://www.serfdom.io/)のバイナリをダウンロードしてきます。\n"
"すべての依存性が解決された後で初めて、これらのサービスは動作を開始します。\n"
"ですので、初回起動時には、正常動作が始まるまでしばらく待つ必要があります。"

msgid ""
"Let's make sure that the cluster works, by a Droonga command, `system.status`."
"\n"
"You can see the result via HTTP, like:"
msgstr ""
"クラスタが動作している事を、`system.status` コマンドを使って確認してみましょう。\n"
"コマンドはHTTP経由で実行できます:"

msgid ""
"~~~\n"
"$ curl \"http://node0:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"status\": \"active\"\n"
"    },\n"
"    \"node1:10031/droonga\": {\n"
"      \"status\": \"active\"\n"
"    }\n"
"  },\n"
"  \"reporter\": \"...\"\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"The result says that two nodes are working correctly.\n"
"Because it is a cluster, another endpoint returns same result."
msgstr ""
"この結果は、2つのノードが正常に動作している事を示しています。\n"
"Droongaはクラスタで動作するので、他のエンドポイントも同じ結果を返します。"

msgid ""
"~~~\n"
"$ curl \"http://node1:10041/droonga/system/status\" | jq \".\"\n"
"{\n"
"  \"nodes\": {\n"
"    \"node0:10031/droonga\": {\n"
"      \"status\": \"active\"\n"
"    },\n"
"    \"node1:10031/droonga\": {\n"
"      \"status\": \"active\"\n"
"    }\n"
"  },\n"
"  \"reporter\": \"...\"\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"`droonga-http-server` connects to all `droonga-engine` in the cluster, and dis"
"tributes requests to them like a load balancer.\n"
"Moreover, even if some `droonga-engine`s stop, `droonga-http-server` wards off"
" those dead engines automatically, and the cluster keeps itself correctly work"
"ing."
msgstr ""
"`droonga-http-server`はクラスタ内のすべての`droonga-engine`に接続し、ロードバランサーのように、リクエストをそれらへ分配"
"します。\n"
"また、もしいくつかの`droonga-engine`が停止しても、`droonga-http-server`はそれらの死んだノードを自動的に回避するため、ク"
"ラスタは正常に動作し続けます。"

msgid "To stop services, run commands like following on each Droonga node:"
msgstr "サービスを停止するには、以下のコマンドを各Droongaノード上で実行します："

msgid ""
"~~~\n"
"# service droonga-engine stop\n"
"# service droonga-http-server stop\n"
"~~~"
msgstr ""

msgid "After verification, start services again, on each Droonga node."
msgstr "確認が終わったら、再度サービスを起動しておきましょう："

msgid "### Communicating with Droonga cluster via its native protocol"
msgstr "### Droongaクラスタとネイティブプロトコルで通信する"

msgid ""
"On the other hand, you can send any native message to `droonga-engine` servers"
" by the command line utility `droonca-request`, included in the gem package `d"
"roonga-client`.\n"
"For example, you can send a `system.status` request to a `droonga-engine` node"
" bypassing `droonga-http-server` service, like:"
msgstr ""
"ここまでに述べたHTTPでの使い方に対して、Gemパッケージ`droonga-client`に含まれるコマンドラインユーティリティの`droonca-req"
"uest`コマンドを使うと、`droonga-engine`のサービスに対してネイティブ形式のメッセージを送ることができます。\n"
"例えば、`droonga-http-server`のサービスを経由せずに`droonga-engine`ノードに`system.status`のリクエストを"
"送る場合は以下の要領です:"

msgid ""
"~~~\n"
"$ echo '{\"dataset\":\"Default\",\"type\":\"system.status\"}' | \\\n"
"    droonga-request --host node0 --receiver-host node0\n"
"Elapsed time: 0.023726995\n"
"{\n"
"  \"inReplyTo\": \"1430292510.4677904\",\n"
"  \"statusCode\": 200,\n"
"  \"type\": \"system.status.result\",\n"
"  \"body\": {\n"
"    \"nodes\": {\n"
"      \"node0:10031/droonga\": {\n"
"        \"status\": \"active\"\n"
"      },\n"
"      \"node1:10031/droonga\": {\n"
"        \"status\": \"active\"\n"
"      }\n"
"    },\n"
"    \"reporter\": \"...\"\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"As above, Droonga's native message is written in the JSON format.\n"
"Because it is very different from Groonga's method, this tutorial doesn't desc"
"ribe details of this way, for now."
msgstr ""
"上記の通り、Droongaのネイティブ形式のメッセージはJSON形式で書かれます。\n"
"これはGroongaのやり方と大きく異なるので、このチュートリアルではひとまず詳細は割愛します。"

msgid "### Create a table, columns, and indexes"
msgstr "### テーブル、カラム、インデックスの作成"

msgid ""
"Now your Droonga cluster actually works as an HTTP server compatible to Groong"
"a's HTTP server."
msgstr "以上の手順で、Groonga HTTPサーバ互換のHTTPサーバとして動作するDroongaクラスタができました。"

msgid ""
"Requests are completely same to ones for a Groonga server.\n"
"To create a new table `Store`, you just have to send a GET request for the `ta"
"ble_create` command, like:"
msgstr ""
"リクエストの送信方法はGroongaサーバの場合と全く同じです。\n"
"新しいテーブル `Store` を作るには、`table_create` コマンドにあたるGETリクエストを送信して下さい:"

msgid ""
"~~~\n"
"$ endpoint=\"http://node0:10041\"\n"
"$ curl \"$endpoint/d/table_create?name=Store&flags=TABLE_PAT_KEY&key_type=Short"
"Text\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358896.360356,\n"
"    0.0035653114318847656\n"
"  ],\n"
"  true\n"
"]\n"
"~~~"
msgstr ""

msgid ""
"Note that you have to specify the host, one of Droonga nodes with active droon"
"ga-http-server, in your Droonga cluster.\n"
"In other words, you can use any favorite node in the cluster as an endpoint.\n"
"All requests will be distributed to suitable nodes in the cluster."
msgstr ""
"リクエストの送信先として、Droongaノード中でdroonga-http-serverが動作しているDroongaノードのどれか1つを指定する必要がある事"
"に注意して下さい。\n"
"言い換えると、接続先（エンドポイント）としてはクラスタ中のどのノードでも好きな物を使う事ができます。\n"
"すべてのリクエストは、クラスタ中の適切なノードに配送されます。"

msgid ""
"OK, now the table has been created successfully.\n"
"Let's see it by the `table_list` command:"
msgstr ""
"さて、テーブルを正しく作成できました。\n"
"`table_list` コマンドを使って、作成されたテーブルの情報を見てみましょう:"

msgid ""
"~~~\n"
"$ curl \"$endpoint/d/table_list\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358908.9126804,\n"
"    0.001600027084350586\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        \"id\",\n"
"        \"UInt32\"\n"
"      ],\n"
"      [\n"
"        \"name\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"path\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"flags\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"domain\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"range\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"default_tokenizer\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"normalizer\",\n"
"        \"ShortText\"\n"
"      ]\n"
"    ],\n"
"    [\n"
"      256,\n"
"      \"Store\",\n"
"      \"/home/vagrant/droonga/000/db.0000100\",\n"
"      \"TABLE_PAT_KEY|PERSISTENT\",\n"
"      \"ShortText\",\n"
"      null,\n"
"      null,\n"
"      null\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid "Because it is a cluster, another endpoint returns same result."
msgstr "Droongaはクラスタで動作するので、他のエンドポイントも同じ結果を返します。"

msgid ""
"~~~\n"
"$ curl \"http://node1:10041/d/table_list\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358908.9126804,\n"
"    0.001600027084350586\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        \"id\",\n"
"        \"UInt32\"\n"
"      ],\n"
"      [\n"
"        \"name\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"path\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"flags\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"domain\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"range\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"default_tokenizer\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"normalizer\",\n"
"        \"ShortText\"\n"
"      ]\n"
"    ],\n"
"    [\n"
"      256,\n"
"      \"Store\",\n"
"      \"/home/vagrant/droonga/000/db.0000100\",\n"
"      \"TABLE_PAT_KEY|PERSISTENT\",\n"
"      \"ShortText\",\n"
"      null,\n"
"      null,\n"
"      null\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid ""
"Next, create new columns `name` and `location` to the `Store` table by the `co"
"lumn_create` command, like:"
msgstr "次は、`column_create` コマンドを使って `Store` テーブルに `name` と `location` という新しいカラムを作ります:"

msgid ""
"~~~\n"
"$ curl \"$endpoint/d/column_create?table=Store&name=name&flags=COLUMN_SCALAR&ty"
"pe=ShortText\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358348.6541538,\n"
"    0.0004096031188964844\n"
"  ],\n"
"  true\n"
"]\n"
"$ curl \"$endpoint/d/column_create?table=Store&name=location&flags=COLUMN_SCALA"
"R&type=WGS84GeoPoint\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358359.084659,\n"
"    0.002511262893676758\n"
"  ],\n"
"  true\n"
"]\n"
"~~~"
msgstr ""

msgid "Create indexes also."
msgstr "インデックスも作成しましょう。"

msgid ""
"~~~\n"
"$ curl \"$endpoint/d/table_create?name=Term&flags=TABLE_PAT_KEY&key_type=ShortT"
"ext&default_tokenizer=TokenBigram&normalizer=NormalizerAuto\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358475.7229664,\n"
"    0.002419710159301758\n"
"  ],\n"
"  true\n"
"]\n"
"$ curl \"$endpoint/d/column_create?table=Term&name=store_name&flags=COLUMN_INDE"
"X|WITH_POSITION&type=Store&source=name\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358494.1656318,\n"
"    0.006799221038818359\n"
"  ],\n"
"  true\n"
"]\n"
"$ curl \"$endpoint/d/table_create?name=Location&flags=TABLE_PAT_KEY&key_type=WG"
"S84GeoPoint\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358505.708896,\n"
"    0.0016951560974121094\n"
"  ],\n"
"  true\n"
"]\n"
"$ curl \"$endpoint/d/column_create?table=Location&name=store&flags=COLUMN_INDEX"
"&type=Store&source=location\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358519.6187897,\n"
"    0.024788379669189453\n"
"  ],\n"
"  true\n"
"]\n"
"~~~"
msgstr ""

msgid "Let's confirm results:"
msgstr "結果を確認してみましょう："

msgid ""
"~~~\n"
"$ curl \"$endpoint/d/table_list\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1416390011.7194495,\n"
"    0.0015704631805419922\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        \"id\",\n"
"        \"UInt32\"\n"
"      ],\n"
"      [\n"
"        \"name\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"path\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"flags\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"domain\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"range\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"default_tokenizer\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"normalizer\",\n"
"        \"ShortText\"\n"
"      ]\n"
"    ],\n"
"    [\n"
"      261,\n"
"      \"Location\",\n"
"      \"/home/droonga-engine/droonga/databases/000/db.0000105\",\n"
"      \"TABLE_PAT_KEY|PERSISTENT\",\n"
"      \"WGS84GeoPoint\",\n"
"      null,\n"
"      null,\n"
"      null\n"
"    ],\n"
"    [\n"
"      256,\n"
"      \"Store\",\n"
"      \"/home/droonga-engine/droonga/databases/000/db.0000100\",\n"
"      \"TABLE_PAT_KEY|PERSISTENT\",\n"
"      \"ShortText\",\n"
"      null,\n"
"      null,\n"
"      null\n"
"    ],\n"
"    [\n"
"      259,\n"
"      \"Term\",\n"
"      \"/home/droonga-engine/droonga/databases/000/db.0000103\",\n"
"      \"TABLE_PAT_KEY|PERSISTENT\",\n"
"      \"ShortText\",\n"
"      null,\n"
"      \"TokenBigram\",\n"
"      \"NormalizerAuto\"\n"
"    ]\n"
"  ]\n"
"]\n"
"$ curl \"$endpoint/d/column_list?table=Store\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1416390069.515929,\n"
"    0.001077413558959961\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        \"id\",\n"
"        \"UInt32\"\n"
"      ],\n"
"      [\n"
"        \"name\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"path\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"type\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"flags\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"domain\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"range\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"source\",\n"
"        \"ShortText\"\n"
"      ]\n"
"    ],\n"
"    [\n"
"      256,\n"
"      \"_key\",\n"
"      \"\",\n"
"      \"\",\n"
"      \"COLUMN_SCALAR\",\n"
"      \"Store\",\n"
"      \"ShortText\",\n"
"      []\n"
"    ],\n"
"    [\n"
"      258,\n"
"      \"location\",\n"
"      \"/home/droonga-engine/droonga/databases/000/db.0000102\",\n"
"      \"fix\",\n"
"      \"COLUMN_SCALAR\",\n"
"      \"Store\",\n"
"      \"WGS84GeoPoint\",\n"
"      []\n"
"    ],\n"
"    [\n"
"      257,\n"
"      \"name\",\n"
"      \"/home/droonga-engine/droonga/databases/000/db.0000101\",\n"
"      \"var\",\n"
"      \"COLUMN_SCALAR\",\n"
"      \"Store\",\n"
"      \"ShortText\",\n"
"      []\n"
"    ]\n"
"  ]\n"
"]\n"
"$ curl \"$endpoint/d/column_list?table=Term\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1416390110.143951,\n"
"    0.0013172626495361328\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        \"id\",\n"
"        \"UInt32\"\n"
"      ],\n"
"      [\n"
"        \"name\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"path\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"type\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"flags\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"domain\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"range\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"source\",\n"
"        \"ShortText\"\n"
"      ]\n"
"    ],\n"
"    [\n"
"      259,\n"
"      \"_key\",\n"
"      \"\",\n"
"      \"\",\n"
"      \"COLUMN_SCALAR\",\n"
"      \"Term\",\n"
"      \"ShortText\",\n"
"      []\n"
"    ],\n"
"    [\n"
"      260,\n"
"      \"store_name\",\n"
"      \"/home/droonga-engine/droonga/databases/000/db.0000104\",\n"
"      \"index\",\n"
"      \"COLUMN_INDEX|WITH_POSITION\",\n"
"      \"Term\",\n"
"      \"Store\",\n"
"      [\n"
"        \"name\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"$ curl \"$endpoint/d/column_list?table=Location\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1416390163.0140722,\n"
"    0.0009713172912597656\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        \"id\",\n"
"        \"UInt32\"\n"
"      ],\n"
"      [\n"
"        \"name\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"path\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"type\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"flags\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"domain\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"range\",\n"
"        \"ShortText\"\n"
"      ],\n"
"      [\n"
"        \"source\",\n"
"        \"ShortText\"\n"
"      ]\n"
"    ],\n"
"    [\n"
"      261,\n"
"      \"_key\",\n"
"      \"\",\n"
"      \"\",\n"
"      \"COLUMN_SCALAR\",\n"
"      \"Location\",\n"
"      \"WGS84GeoPoint\",\n"
"      []\n"
"    ],\n"
"    [\n"
"      262,\n"
"      \"store\",\n"
"      \"/home/droonga-engine/droonga/databases/000/db.0000106\",\n"
"      \"index\",\n"
"      \"COLUMN_INDEX\",\n"
"      \"Location\",\n"
"      \"Store\",\n"
"      [\n"
"        \"location\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid "### Load data to a table"
msgstr "### テーブルへのデータの読み込み"

msgid ""
"Let's load data to the `Store` table.\n"
"First, prepare the data as a JSON file `stores.json`."
msgstr ""
"それでは、`Store` テーブルにデータを読み込みましょう。\n"
"まず、データを `stores.json` という名前のJSON形式のファイルとして用意します。"

msgid "stores.json:"
msgstr ""

msgid ""
"~~~\n"
"[\n"
"[\"_key\",\"name\",\"location\"],\n"
"[\"store0\",\"1st Avenue & 75th St. - New York NY  (W)\",\"40.770262,-73.954798\"],\n"
"[\"store1\",\"76th & Second - New York NY  (W)\",\"40.771056,-73.956757\"],\n"
"[\"store2\",\"2nd Ave. & 9th Street - New York NY\",\"40.729445,-73.987471\"],\n"
"[\"store3\",\"15th & Third - New York NY  (W)\",\"40.733946,-73.9867\"],\n"
"[\"store4\",\"41st and Broadway - New York NY  (W)\",\"40.755111,-73.986225\"],\n"
"[\"store5\",\"84th & Third Ave - New York NY  (W)\",\"40.777485,-73.954979\"],\n"
"[\"store6\",\"150 E. 42nd Street - New York NY  (W)\",\"40.750784,-73.975582\"],\n"
"[\"store7\",\"West 43rd and Broadway - New York NY  (W)\",\"40.756197,-73.985624\"],"
"\n"
"[\"store8\",\"Macy's 35th Street Balcony - New York NY\",\"40.750703,-73.989787\"],\n"
"[\"store9\",\"Macy's 6th Floor - Herald Square - New York NY  (W)\",\"40.750703,-73"
".989787\"],\n"
"[\"store10\",\"Herald Square- Macy's - New York NY\",\"40.750703,-73.989787\"],\n"
"[\"store11\",\"Macy's 5th Floor - Herald Square - New York NY  (W)\",\"40.750703,-7"
"3.989787\"],\n"
"[\"store12\",\"80th & York - New York NY  (W)\",\"40.772204,-73.949862\"],\n"
"[\"store13\",\"Columbus @ 67th - New York NY  (W)\",\"40.774009,-73.981472\"],\n"
"[\"store14\",\"45th & Broadway - New York NY  (W)\",\"40.75766,-73.985719\"],\n"
"[\"store15\",\"Marriott Marquis - Lobby - New York NY\",\"40.759123,-73.984927\"],\n"
"[\"store16\",\"Second @ 81st - New York NY  (W)\",\"40.77466,-73.954447\"],\n"
"[\"store17\",\"52nd & Seventh - New York NY  (W)\",\"40.761829,-73.981141\"],\n"
"[\"store18\",\"1585 Broadway (47th) - New York NY  (W)\",\"40.759806,-73.985066\"],\n"
"[\"store19\",\"85th & First - New York NY  (W)\",\"40.776101,-73.949971\"],\n"
"[\"store20\",\"92nd & 3rd - New York NY  (W)\",\"40.782606,-73.951235\"],\n"
"[\"store21\",\"165 Broadway - 1 Liberty - New York NY  (W)\",\"40.709727,-74.011395"
"\"],\n"
"[\"store22\",\"1656 Broadway - New York NY  (W)\",\"40.762434,-73.983364\"],\n"
"[\"store23\",\"54th & Broadway - New York NY  (W)\",\"40.764275,-73.982361\"],\n"
"[\"store24\",\"Limited Brands-NYC - New York NY\",\"40.765219,-73.982025\"],\n"
"[\"store25\",\"19th & 8th - New York NY  (W)\",\"40.743218,-74.000605\"],\n"
"[\"store26\",\"60th & Broadway-II - New York NY  (W)\",\"40.769196,-73.982576\"],\n"
"[\"store27\",\"63rd & Broadway - New York NY  (W)\",\"40.771376,-73.982709\"],\n"
"[\"store28\",\"195 Broadway - New York NY  (W)\",\"40.710703,-74.009485\"],\n"
"[\"store29\",\"2 Broadway - New York NY  (W)\",\"40.704538,-74.01324\"],\n"
"[\"store30\",\"2 Columbus Ave. - New York NY  (W)\",\"40.769262,-73.984764\"],\n"
"[\"store31\",\"NY Plaza - New York NY  (W)\",\"40.702802,-74.012784\"],\n"
"[\"store32\",\"36th and Madison - New York NY  (W)\",\"40.748917,-73.982683\"],\n"
"[\"store33\",\"125th St. btwn Adam Clayton & FDB - New York NY\",\"40.808952,-73.94"
"8229\"],\n"
"[\"store34\",\"70th & Broadway - New York NY  (W)\",\"40.777463,-73.982237\"],\n"
"[\"store35\",\"2138 Broadway - New York NY  (W)\",\"40.781078,-73.981167\"],\n"
"[\"store36\",\"118th & Frederick Douglas Blvd. - New York NY  (W)\",\"40.806176,-73"
".954109\"],\n"
"[\"store37\",\"42nd & Second - New York NY  (W)\",\"40.750069,-73.973393\"],\n"
"[\"store38\",\"Broadway @ 81st - New York NY  (W)\",\"40.784972,-73.978987\"],\n"
"[\"store39\",\"Fashion Inst of Technology - New York NY\",\"40.746948,-73.994557\"]\n"
"]\n"
"~~~"
msgstr ""

msgid "Then, send it as a POST request of the `load` command, like:"
msgstr "データが準備できたら、`load` コマンドのPOSTリクエストとして送信します:"

msgid ""
"~~~\n"
"$ curl --data \"@stores.json\" \"$endpoint/d/load?table=Store\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401358564.909,\n"
"    0.158\n"
"  ],\n"
"  [\n"
"    40\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid "Now all data in the JSON file are successfully loaded."
msgstr "これで、JSONファイル中のすべてのデータが正しく読み込まれます。"

msgid "### Select data from a table"
msgstr "### テーブル中のデータを取り出す"

msgid "OK, all data is now ready."
msgstr "以上で、すべてのデータが準備できました。"

msgid "As the starter, let's select initial ten records with the `select` command:"
msgstr "試しに、`select` コマンドを使って最初の10レコードを取り出してみましょう:"

msgid ""
"~~~\n"
"$ curl \"$endpoint/d/select?table=Store&output_columns=name&limit=10\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1401362059.7437818,\n"
"    4.935264587402344e-05\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        40\n"
"      ],\n"
"      [\n"
"        [\n"
"          \"name\",\n"
"          \"ShortText\"\n"
"        ]\n"
"      ],\n"
"      [\n"
"        \"1st Avenue & 75th St. - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"76th & Second - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Herald Square- Macy's - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Macy's 5th Floor - Herald Square - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"80th & York - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Columbus @ 67th - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"45th & Broadway - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"Marriott Marquis - Lobby - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"Second @ 81st - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"52nd & Seventh - New York NY  (W)\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid "Of course you can specify conditions via the `query` option:"
msgstr "もちろん、`query` オプションを使って検索条件を指定する事もできます:"

msgid ""
"~~~\n"
"$ curl \"$endpoint/d/select?table=Store&query=Columbus&match_columns=name&outpu"
"t_columns=name&limit=10\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1398670157.661574,\n"
"    0.0012705326080322266\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        2\n"
"      ],\n"
"      [\n"
"        [\n"
"          \"_key\",\n"
"          \"ShortText\"\n"
"        ]\n"
"      ],\n"
"      [\n"
"        \"Columbus @ 67th - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"2 Columbus Ave. - New York NY  (W)\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"$ curl \"$endpoint/d/select?table=Store&filter=name@'Ave'&output_columns=name&l"
"imit=10\" | jq \".\"\n"
"[\n"
"  [\n"
"    0,\n"
"    1398670586.193325,\n"
"    0.0003848075866699219\n"
"  ],\n"
"  [\n"
"    [\n"
"      [\n"
"        3\n"
"      ],\n"
"      [\n"
"        [\n"
"          \"_key\",\n"
"          \"ShortText\"\n"
"        ]\n"
"      ],\n"
"      [\n"
"        \"2nd Ave. & 9th Street - New York NY\"\n"
"      ],\n"
"      [\n"
"        \"84th & Third Ave - New York NY  (W)\"\n"
"      ],\n"
"      [\n"
"        \"2 Columbus Ave. - New York NY  (W)\"\n"
"      ]\n"
"    ]\n"
"  ]\n"
"]\n"
"~~~"
msgstr ""

msgid "## Conclusion"
msgstr "## まとめ"

msgid ""
"In this tutorial, you did set up a [Droonga][] cluster on [Ubuntu Linux][Ubunt"
"u] or [CentOS][] computers.\n"
"Moreover, you load data to it and select data from it successfully, as a [Groo"
"nga][] compatible server."
msgstr ""
"このチュートリアルでは、[Ubuntu Linux][Ubuntu]または[CentOS][]のコンピュータを使って[Droonga][]クラスタを構築しま"
"した。\n"
"また、[Groonga][]サーバ互換のシステムとしてデータを読み込ませたり取り出したりすることにも成功しました。"

msgid ""
"Currently, Droonga supports only some limited features of Groonga compatible c"
"ommands.\n"
"See the [command reference][] for more details."
msgstr ""
"現在の所、DroongaはGroonga互換のコマンドのうちいくつかの限定的な機能にのみ対応しています。\n"
"詳細は[コマンドリファレンス][command reference]を参照して下さい。"

msgid ""
"Next, let's learn [how to backup and restore contents of a Droonga cluster](.."
"/dump-restore/)."
msgstr "続いて、[Droongaクラスタのデータをバックアップしたり復元したりする手順](../dump-restore/)を学びましょう。"

msgid ""
"  [Ubuntu]: http://www.ubuntu.com/\n"
"  [CentOS]: https://www.centos.org/\n"
"  [Droonga]: https://droonga.org/\n"
"  [Groonga]: http://groonga.org/\n"
"  [command reference]: ../../reference/commands/"
msgstr ""
