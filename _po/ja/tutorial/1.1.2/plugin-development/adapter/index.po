msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2014-11-30 23:19+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: \"Plugin: Adapt requests and responses, to add a new command based on ot"
"her existing commands\"\n"
"layout: en\n"
"---"
msgstr ""
"---\n"
"title: \"プラグイン: リクエストとレスポンスを加工し、既存のコマンドに基づいた新しいコマンドを作成する\"\n"
"layout: ja\n"
"---"

msgid ""
"* TOC\n"
"{:toc}"
msgstr ""

msgid "## The goal of this tutorial"
msgstr "## チュートリアルのゴール"

msgid "Learning steps to develop a Droonga plugin by yourself."
msgstr "Droongaプラグインを自分で開発するための手順を身につけましょう。"

msgid ""
"This page focuses on the \"adaption\" by Droonga plugins.\n"
"At the last, we create a new command `storeSearch` based on the existing `sear"
"ch` command, with a small practical plugin."
msgstr ""
"このページでは、Droongaプラグインによる「加工」（adaption）に焦点を当てます。\n"
"最後には、小さな練習用のプラグインを開発して、既存の`search`コマンドに基づく新しいコマンド`storeSearch`を開発することになります。"

msgid "## Precondition"
msgstr "## 前提条件"

msgid "* You must complete the [basic tutorial][]."
msgstr "* [基本的な使い方のチュートリアル][basic tutorial] を完了している必要があります。"

msgid "## Adaption for incoming messages"
msgstr "## 入力メッセージの加工"

msgid ""
"First, let's study basics with a simple logger plugin named `sample-logger` af"
"fects at the adaption phase."
msgstr "まず`sample-logger`という簡単なロガープラグインを使って、適合フェーズに作用するプラグインを作りながら、基礎を学びましょう。"

msgid ""
"We sometime need to modify incoming requests from outside to Droonga Engine.\n"
"We can use a plugin for this purpose."
msgstr "外部のシステムからDroonga Engineにやってくるリクエストを加工する必要がある場合があります。このようなときに、プラグインを利用できます。"

msgid ""
"Let's see how to create a plugin for the *pre adaption phase*, in this section"
"."
msgstr "このセクションでは、どのようにして*前適合フェーズ*のプラグインを作るのかを見てみていきます。"

msgid "### Directory Structure"
msgstr "### ディレクトリの構造"

msgid ""
"Assume that we are going to add a new plugin to the system built in the [basic"
" tutorial][].\n"
"In that tutorial, Droonga engine was placed under `engine` directory."
msgstr ""
"[基本のチュートリアル][basic tutorial]で作成したシステムに対してプラグインを追加すると仮定します。\n"
"先のチュートリアルでは、Droongaエンジンは `engine` ディレクトリ内に置かれていました。"

msgid ""
"Plugins need to be placed in an appropriate directory. Let's create the direct"
"ory:"
msgstr "プラグインは、適切な位置のディレクトリに置かれる必要があります。ディレクトリを作成しましょう："

msgid ""
"~~~\n"
"# cd engine\n"
"# mkdir -p lib/droonga/plugins\n"
"~~~"
msgstr ""

msgid "After creating the directory, the directory structure should be like this:"
msgstr "ディレクトリを作成した後は、ディレクトリ構造は以下のようになります："

msgid ""
"~~~\n"
"engine\n"
"├── catalog.json\n"
"├── fluentd.conf\n"
"└── lib\n"
"    └── droonga\n"
"        └── plugins\n"
"~~~"
msgstr ""

msgid "### Create a plugin"
msgstr "### プラグインの作成"

msgid ""
"You must put codes for a plugin into a file which has the name *same to the pl"
"ugin itself*.\n"
"Because the plugin now you creating is `sample-logger`, put codes into a file "
"`sample-logger.rb` in the `droonga/plugins` directory."
msgstr ""
"プラグイン用のコードは、*プラグイン自身の名前と同じ名前*のファイルに書く必要があります。\n"
"これから作るプラグインの名前は`sample-logger`なので、コードは`droonga/plugins`ディレクトリ内の`sample-logger."
"rb`の中に書いていくことになります。"

msgid "lib/droonga/plugins/sample-logger.rb:"
msgstr ""

msgid ""
"~~~ruby\n"
"require \"droonga/plugin\""
msgstr ""

msgid ""
"module Droonga\n"
"  module Plugins\n"
"    module SampleLoggerPlugin\n"
"      extend Plugin\n"
"      register(\"sample-logger\")"
msgstr ""

msgid ""
"      class Adapter < Droonga::Adapter\n"
"        # You'll put codes to modify messages here.\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""
"      class Adapter < Droonga::Adapter\n"
"        # メッセージを加工するためのコードをここに書きます。\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"~~~"

msgid "This plugin does nothing except registering itself to the Droonga Engine."
msgstr "このプラグインは、Droonga Engineに自分自身を登録する以外の事は何もしません。"

msgid ""
" * The `sample-logger` is the name of the plugin itself. You'll use it in your"
" `catalog.json`, to activate the plugin.\n"
" * As the example above, you must define your plugin as a module.\n"
" * Behaviors at the pre adaption phase is defined a class called *adapter*.\n"
"   An adapter class must be defined as a subclass of the `Droonga::Adapter`, u"
"nder the namespace of the plugin module."
msgstr ""
" * `sample-logger`は、このプラグイン自身の名前です。これは`catalog.json`の中で、プラグインを有効化するために使う事になります"
"。\n"
" * 上記の例のように、プラグインはモジュールとして定義する必要があります。\n"
" * 前適合フェーズでの振る舞いは、*アダプター*と呼ばれるクラスとして定義します。\n"
"   アダプタークラスは必ず、プラグインのモジュールの名前空間の配下で、`Droonga::Adapter`のサブクラスとして定義する必要があります。"

msgid "### Activate the plugin with `catalog.json`"
msgstr "### `catalog.json`でプラグインを有効化する"

msgid ""
"You need to update `catalog.json` to activate your plugin.\n"
"Insert the name of the plugin `\"sample-logger\"` to the `\"plugins\"` list under "
"the dataset, like:"
msgstr ""
"プラグインを有効化するには、`catalog.json`を更新する必要があります。\n"
"プラグインの名前`\"sample-logger\"`を、データセットの配下の`\"plugins\"`のリストに挿入します。例："

msgid "catalog.json:"
msgstr ""

msgid ""
"~~~\n"
"(snip)\n"
"      \"datasets\": {\n"
"        \"Starbucks\": {\n"
"          (snip)\n"
"          \"plugins\": [\"sample-logger\", \"groonga\", \"crud\", \"search\", \"dump\", \"s"
"tatus\"],\n"
"(snip)\n"
"~~~"
msgstr ""

msgid ""
"Note: you must place `\"sample-logger\"` before `\"search\"`, because the `sample-"
"logger` plugin depends on the `search`. Droonga Engine applies plugins at the "
"pre adaption phase in the order defined in the `catalog.json`, so you must res"
"olve plugin dependencies by your hand (for now)."
msgstr ""
"注意：`\"sample-logger\"`は`\"search\"`よりも前に置く必要があります。これは、`sample-logger`プラグインが`search"
"`に依存しているからです。Droonga Engineは前適合フェーズにおいて、プラグインを`catalog.json`で定義された順に適用しますので、プラ"
"グイン同士の依存関係は（今のところは）自分で解決しなくてはなりません。"

msgid "### Run and test"
msgstr "### 実行と動作を確認する"

msgid ""
"Let's get Droonga started.\n"
"Note that you need to specify `./lib` directory in `RUBYLIB` environment varia"
"ble in order to make ruby possible to find your plugin."
msgstr ""
"Droongaを起動しましょう。\n"
"Rubyがあなたの書いたプラグインのコード群を見つけられるように、`RUBYLIB`環境変数に`./lib`を加えることに注意して下さい。"

msgid ""
"~~~\n"
"# kill $(cat fluentd.pid)\n"
"# RUBYLIB=./lib fluentd --config fluentd.conf --log fluentd.log --daemon fluen"
"td.pid\n"
"~~~"
msgstr ""

msgid ""
"Then, verify that the engine is correctly working.\n"
"First, create a request as a JSON."
msgstr ""
"そうしたら、Engineが正しく動作しているかを確かめます。\n"
"まず、以下のようなJSON形式のリクエストを作成します。"

msgid "search-columbus.json:"
msgstr ""

msgid ""
"~~~json\n"
"{\n"
"  \"dataset\" : \"Starbucks\",\n"
"  \"type\"    : \"search\",\n"
"  \"body\"    : {\n"
"    \"queries\" : {\n"
"      \"stores\" : {\n"
"        \"source\"    : \"Store\",\n"
"        \"condition\" : {\n"
"          \"query\"   : \"Columbus\",\n"
"          \"matchTo\" : \"_key\"\n"
"        },\n"
"        \"output\" : {\n"
"          \"elements\"   : [\n"
"            \"startTime\",\n"
"            \"elapsedTime\",\n"
"            \"count\",\n"
"            \"attributes\",\n"
"            \"records\"\n"
"          ],\n"
"          \"attributes\" : [\"_key\"],\n"
"          \"limit\"      : -1\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid ""
"This is corresponding to the example to search \"Columbus\" in the [basic tutori"
"al][].\n"
"Note that the request for the Protocol Adapter is encapsulated in `\"body\"` ele"
"ment."
msgstr ""
"これは[基本のチュートリアル](basic tutorial)において\"Columbus\"を検索する例に対応しています。\n"
"Protocol Adapterへのリクエストは`\"body\"`要素の中に置かれていることに注意して下さい。"

msgid "Send the request to engine with `droonga-request`:"
msgstr "`droonga-request`コマンドを使ってリクエストをDroonga Engineに送信します："

msgid ""
"~~~\n"
"# droonga-request --tag starbucks search-columbus.json\n"
"Elapsed time: 0.021544\n"
"[\n"
"  \"droonga.message\",\n"
"  1392617533,\n"
"  {\n"
"    \"inReplyTo\": \"1392617533.9644868\",\n"
"    \"statusCode\": 200,\n"
"    \"type\": \"search.result\",\n"
"    \"body\": {\n"
"      \"stores\": {\n"
"        \"count\": 2,\n"
"        \"records\": [\n"
"          [\n"
"            \"Columbus @ 67th - New York NY  (W)\"\n"
"          ],\n"
"          [\n"
"            \"2 Columbus Ave. - New York NY  (W)\"\n"
"          ]\n"
"        ]\n"
"      }\n"
"    }\n"
"  }\n"
"]\n"
"~~~"
msgstr ""

msgid "This is the search result."
msgstr "これが検索結果です。"

msgid "### Do something in the plugin: take logs"
msgstr "### プラグインを動作させる: ログをとる"

msgid ""
"The plugin we have created do nothing so far. Let's get the plugin to do some "
"interesting."
msgstr "ここまでで作成したプラグインは、何もしない物でした。それでは、このプラグインを何か面白いことをする物にしましょう。"

msgid "First of all, trap `search` request and log it. Update the plugin like below:"
msgstr "まず最初に、`search`のリクエストを捕まえてログ出力してみます。プラグインを以下のように更新して下さい："

msgid ""
"~~~ruby\n"
"(snip)\n"
"    module SampleLoggerPlugin\n"
"      extend Plugin\n"
"      register(\"sample-logger\")"
msgstr ""

msgid ""
"      class Adapter < Droonga::Adapter\n"
"        input_message.pattern = [\"type\", :equal, \"search\"]"
msgstr ""

msgid ""
"        def adapt_input(input_message)\n"
"          logger.info(\"SampleLoggerPlugin::Adapter\", :message => input_message"
")\n"
"        end\n"
"      end\n"
"    end\n"
"(snip)\n"
"~~~"
msgstr ""

msgid ""
"The line beginning with `input_message.pattern` is a configuration.\n"
"This example defines a plugin for any incoming message with `\"type\":\"search\"`."
"\n"
"See the [reference manual's configuration section](../../../reference/plugin/a"
"dapter/#config)"
msgstr ""
"`input_message.pattern`で始まる行は、設定です。\n"
"この例では、プラグインを`\"type\":\"search\"`という情報を持つすべての入力メッセージに対して働くように定義しています。.\n"
"詳しくは[リファレンスマニュアルの設定のセクション](../../../reference/plugin/adapter/#config)を参照して下さい。"

msgid ""
"The method `adapt_input` is called for every incoming message matching to the "
"pattern.\n"
"The argument `input_message` is a wrapped version of the incoming message."
msgstr ""
"`adapt_input`メソッドは、パターンに当てはまるすべての入力メッセージに対して毎回呼ばれます。\n"
"引数の`input_message`は、入力メッセージをラップした物です。"

msgid "Restart fluentd:"
msgstr "fluentdを再起動します："

msgid "Send the request same as the previous section:"
msgstr "前のセクションと同じリクエストを送信します："

msgid ""
"~~~\n"
"# droonga-request --tag starbucks search-columbus.json\n"
"Elapsed time: 0.014714\n"
"[\n"
"  \"droonga.message\",\n"
"  1392618037,\n"
"  {\n"
"    \"inReplyTo\": \"1392618037.935901\",\n"
"    \"statusCode\": 200,\n"
"    \"type\": \"search.result\",\n"
"    \"body\": {\n"
"      \"stores\": {\n"
"        \"count\": 2,\n"
"        \"records\": [\n"
"          [\n"
"            \"Columbus @ 67th - New York NY  (W)\"\n"
"          ],\n"
"          [\n"
"            \"2 Columbus Ave. - New York NY  (W)\"\n"
"          ]\n"
"        ]\n"
"      }\n"
"    }\n"
"  }\n"
"]\n"
"~~~"
msgstr ""

msgid "You will see something like below fluentd's log in `fluentd.log`:"
msgstr "すると、fluentdのログファイルである`fluentd.log`に以下のようなログが出力される事を確認できるでしょう。"

msgid ""
"~~~\n"
"2014-02-17 15:20:37 +0900 [info]: SampleLoggerPlugin::Adapter message=#<Droong"
"a::InputMessage:0x007f8ae3e1dd98 @raw_message={\"dataset\"=>\"Starbucks\", \"type\"="
">\"search\", \"body\"=>{\"queries\"=>{\"stores\"=>{\"source\"=>\"Store\", \"condition\"=>{\"q"
"uery\"=>\"Columbus\", \"matchTo\"=>\"_key\"}, \"output\"=>{\"elements\"=>[\"startTime\", \"e"
"lapsedTime\", \"count\", \"attributes\", \"records\"], \"attributes\"=>[\"_key\"], \"limit"
"\"=>-1}}}}, \"replyTo\"=>{\"type\"=>\"search.result\", \"to\"=>\"127.0.0.1:64591/droonga"
"\"}, \"id\"=>\"1392618037.935901\", \"date\"=>\"2014-02-17 15:20:37 +0900\", \"appliedAd"
"apters\"=>[]}>\n"
"~~~"
msgstr ""

msgid ""
"This shows the message is received by our `SampleLoggerPlugin::Adapter` and th"
"en passed to Droonga. Here we can modify the message before the actual data pr"
"ocessing."
msgstr ""
"このログは、メッセージが`SampleLoggerPlugin::Adapter`によって受信されて、Droongaに渡されたことを示しています。実際のデー"
"タ処理の前に、この時点でメッセージを加工することができます。"

msgid "### Modify messages with the plugin"
msgstr "### プラグインでメッセージを加工する"

msgid ""
"Suppose that we want to restrict the number of records returned in the respons"
"e, say `1`.\n"
"What we need to do is set `limit` to be `1` for every request.\n"
"Update plugin like below:"
msgstr ""
"レスポンスで返されるレコードの数を常に1つだけに制限したい場合、すべてのリクエストについて`limit`を`1`に指定する必要があります。プラグインを以下の"
"ように変更してみましょう："

msgid ""
"~~~ruby\n"
"(snip)\n"
"        def adapt_input(input_message)\n"
"          logger.info(\"SampleLoggerPlugin::Adapter\", :message => input_message"
")\n"
"          input_message.body[\"queries\"][\"stores\"][\"output\"][\"limit\"] = 1\n"
"        end\n"
"(snip)\n"
"~~~"
msgstr ""

msgid ""
"Like above, you can modify the incoming message via methods of the argument `i"
"nput_message`.\n"
"See the [reference manual for the message class](../../../reference/plugin/ada"
"pter/#classes-Droonga-InputMessage)."
msgstr ""
"上の例のように、プラグインは`adapt_input`メソッドの引数として渡される`input_message`を通じて入力メッセージの内容を加工することが"
"できます。\n"
"詳細は[当該メッセージの実装であるクラスのリファレンスマニュアル](../../../reference/plugin/adapter/#classes-D"
"roonga-InputMessage)を参照して下さい。"

msgid ""
"After restart, the response always includes only one record in `records` secti"
"on."
msgstr "再起動後、レスポンスは`records`の値としてレコードを常に（最大で）1つだけ含むようになります。"

msgid "Send the request same as the previous:"
msgstr "先の場合と同じリクエストを投げてみましょう："

msgid ""
"~~~\n"
"# droonga-request --tag starbucks search-columbus.json\n"
"Elapsed time: 0.017343\n"
"[\n"
"  \"droonga.message\",\n"
"  1392618279,\n"
"  {\n"
"    \"inReplyTo\": \"1392618279.0578449\",\n"
"    \"statusCode\": 200,\n"
"    \"type\": \"search.result\",\n"
"    \"body\": {\n"
"      \"stores\": {\n"
"        \"count\": 2,\n"
"        \"records\": [\n"
"          [\n"
"            \"Columbus @ 67th - New York NY  (W)\"\n"
"          ]\n"
"        ]\n"
"      }\n"
"    }\n"
"  }\n"
"]\n"
"~~~"
msgstr ""

msgid ""
"Note that `count` is still `2` because `limit` does not affect to `count`. See"
" [search][] for details of the `search` command."
msgstr ""
"`count`が依然として`2`であることに注意して下さい。これは、`limit`が`count`には影響を与えないという`search`コマンド自体の仕様"
"によるものです。`search`コマンドの詳細については[`search`コマンドのリファレンスマニュアル][search]を参照して下さい。"

msgid ""
"~~~\n"
"2014-02-17 15:24:39 +0900 [info]: SampleLoggerPlugin::Adapter message=#<Droong"
"a::InputMessage:0x007f956685c908 @raw_message={\"dataset\"=>\"Starbucks\", \"type\"="
">\"search\", \"body\"=>{\"queries\"=>{\"stores\"=>{\"source\"=>\"Store\", \"condition\"=>{\"q"
"uery\"=>\"Columbus\", \"matchTo\"=>\"_key\"}, \"output\"=>{\"elements\"=>[\"startTime\", \"e"
"lapsedTime\", \"count\", \"attributes\", \"records\"], \"attributes\"=>[\"_key\"], \"limit"
"\"=>-1}}}}, \"replyTo\"=>{\"type\"=>\"search.result\", \"to\"=>\"127.0.0.1:64616/droonga"
"\"}, \"id\"=>\"1392618279.0578449\", \"date\"=>\"2014-02-17 15:24:39 +0900\", \"appliedA"
"dapters\"=>[]}>\n"
"~~~"
msgstr ""

msgid "## Adaption for outgoing messages"
msgstr "## 出力メッセージの加工"

msgid ""
"In case we need to modify outgoing messages from Droonga Engine, for example, "
"search results, then we can do it simply by another method.\n"
"In this section, we are going to define a method to adapt outgoing messages."
msgstr ""
"Droonga Engineからの出力メッセージ（例えば検索結果など）を加工したい場合は、別のメソッドを定義することでそれを実現できます。\n"
"このセクションでは、出力メッセージを加工するメソッドを定義してみましょう。"

msgid "### Add a method to adapt outgoing messages"
msgstr "### 出力のメッセージを加工するメソッドを追加する"

msgid ""
"Let's take logs of results of `search` command.\n"
"Define the `adapt_output` method to process outgoing messages.\n"
"Remove `adapt_input` at this moment for the simplicity."
msgstr ""
"`search`コマンドの結果のログを取ってみましょう。\n"
"出力メッセージを処理するために、`adapt_output`メソッドを定義します。\n"
"説明を簡単にするために、ここでは`adapt_input`メソッドの定義を一旦削除します。"

msgid ""
"        def adapt_output(output_message)\n"
"          logger.info(\"SampleLoggerPlugin::Adapter\", :message => output_messag"
"e)\n"
"        end\n"
"      end\n"
"    end\n"
"(snip)\n"
"~~~"
msgstr ""

msgid ""
"The method `adapt_output` is called only for outgoing messages triggered by in"
"coming messages trapped by the plugin itself, even if there is only the matchi"
"ng pattern and the `adapt_input` method is not defined.\n"
"See the [reference manual for plugin developers](../../../reference/plugin/ada"
"pter/) for more details."
msgstr ""
"`adapt_output`メソッドは、そのプラグイン自身によって捕捉された入力メッセージに起因して送出された出力メッセージに対してのみ呼ばれます（マッチン"
"グパターンのみが指定されていて、`adapt_input`メソッドが定義されていない場合であっても）。\n"
"詳細は[プラグイン開発APIのリファレンスマニュアル](../../../reference/plugin/adapter/)を参照して下さい。"

msgid "### Run"
msgstr "### 実行する"

msgid "Let's restart fluentd:"
msgstr "fluentdを再起動しましょう："

msgid ""
"And send search request (Use the same JSON for request as in the previous sect"
"ion):"
msgstr "次に、検索リクエストを送ります（前のセクションと同じJSONをリクエストとして使います）："

msgid ""
"~~~\n"
"# droonga-request --tag starbucks search-columbus.json\n"
"Elapsed time: 0.015491\n"
"[\n"
"  \"droonga.message\",\n"
"  1392619269,\n"
"  {\n"
"    \"inReplyTo\": \"1392619269.184789\",\n"
"    \"statusCode\": 200,\n"
"    \"type\": \"search.result\",\n"
"    \"body\": {\n"
"      \"stores\": {\n"
"        \"count\": 2,\n"
"        \"records\": [\n"
"          [\n"
"            \"Columbus @ 67th - New York NY  (W)\"\n"
"          ],\n"
"          [\n"
"            \"2 Columbus Ave. - New York NY  (W)\"\n"
"          ]\n"
"        ]\n"
"      }\n"
"    }\n"
"  }\n"
"]\n"
"~~~"
msgstr ""

msgid "The fluentd's log should be like as follows:"
msgstr "fluentdのログは以下のようになっているはずです："

msgid ""
"~~~\n"
"2014-02-17 15:41:09 +0900 [info]: SampleLoggerPlugin::Adapter message=#<Droong"
"a::OutputMessage:0x007fddcad4d5a0 @raw_message={\"dataset\"=>\"Starbucks\", \"type\""
"=>\"dispatcher\", \"body\"=>{\"stores\"=>{\"count\"=>2, \"records\"=>[[\"Columbus @ 67th "
"- New York NY  (W)\"], [\"2 Columbus Ave. - New York NY  (W)\"]]}}, \"replyTo\"=>{\""
"type\"=>\"search.result\", \"to\"=>\"127.0.0.1:64724/droonga\"}, \"id\"=>\"1392619269.18"
"4789\", \"date\"=>\"2014-02-17 15:41:09 +0900\", \"appliedAdapters\"=>[\"Droonga::Plug"
"ins::SampleLoggerPlugin::Adapter\", \"Droonga::Plugins::Error::Adapter\"]}>\n"
"~~~"
msgstr ""

msgid ""
"This shows that the result of `search` is passed to the `adapt_output` method "
"(and logged), then outputted."
msgstr "ここには、`search`の結果が`adapt_output`メソッドに渡された事（そしてログ出力された事）が示されています。"

msgid "### Modify results in the adaption phase"
msgstr "### 結果を適合フェーズで加工する"

msgid ""
"Let's modify the result at the *post adaption phase*.\n"
"For example, add `completedAt` attribute that shows the time completed the req"
"uest.\n"
"Update your plugin as follows:"
msgstr ""
"*後適合フェーズ*において、結果を加工してみましょう。\n"
"例えば、リクエストに対する処理が完了した時刻を示す`completedAt`というアトリビュートを加えるとします。\n"
"プラグインを以下のように更新して下さい："

msgid ""
"~~~ruby\n"
"(snip)\n"
"        def adapt_output(output_message)\n"
"          logger.info(\"SampleLoggerPlugin::Adapter\", :message => output_messag"
"e)\n"
"          output_message.body[\"stores\"][\"completedAt\"] = Time.now\n"
"        end\n"
"(snip)\n"
"~~~"
msgstr ""

msgid ""
"Like above, you can modify the outgoing message via methods of the argument `o"
"utput_message`. \n"
"See the [reference manual for the message class](../../../reference/plugin/ada"
"pter/#classes-Droonga-OutputMessage)."
msgstr ""
"上の例のように、出力メッセージは`adapt_output`メソッドの引数として渡される`output_message`を通じて加工することができます。\n"
"詳細は[当該メッセージの実装のクラスのリファレンスマニュアル](../../../reference/plugin/adapter/#classes-Dro"
"onga-OutputMessage)を参照して下さい。"

msgid "Send the same search request:"
msgstr "同じ検索リクエストを送ってみましょう："

msgid ""
"~~~\n"
"# droonga-request --tag starbucks search-columbus.json\n"
"Elapsed time: 0.013983\n"
"[\n"
"  \"droonga.message\",\n"
"  1392619528,\n"
"  {\n"
"    \"inReplyTo\": \"1392619528.235121\",\n"
"    \"statusCode\": 200,\n"
"    \"type\": \"search.result\",\n"
"    \"body\": {\n"
"      \"stores\": {\n"
"        \"count\": 2,\n"
"        \"records\": [\n"
"          [\n"
"            \"Columbus @ 67th - New York NY  (W)\"\n"
"          ],\n"
"          [\n"
"            \"2 Columbus Ave. - New York NY  (W)\"\n"
"          ]\n"
"        ],\n"
"        \"completedAt\": \"2014-02-17T06:45:28.247669Z\"\n"
"      }\n"
"    }\n"
"  }\n"
"]\n"
"~~~"
msgstr ""

msgid ""
"Now you can see `completedAt` attribute containing the time completed the requ"
"est.\n"
"The results in `fluentd.log` will be like this:"
msgstr ""
"リクエストの処理が完了した時刻を含むアトリビュートである`completedAt`が追加された事を確認できました。\n"
"`fluentd.log`には以下のように出力されているはずです："

msgid ""
"~~~\n"
"2014-02-17 15:45:28 +0900 [info]: SampleLoggerPlugin::Adapter message=#<Droong"
"a::OutputMessage:0x007fd384f3ab60 @raw_message={\"dataset\"=>\"Starbucks\", \"type\""
"=>\"dispatcher\", \"body\"=>{\"stores\"=>{\"count\"=>2, \"records\"=>[[\"Columbus @ 67th "
"- New York NY  (W)\"], [\"2 Columbus Ave. - New York NY  (W)\"]]}}, \"replyTo\"=>{\""
"type\"=>\"search.result\", \"to\"=>\"127.0.0.1:64849/droonga\"}, \"id\"=>\"1392619528.23"
"5121\", \"date\"=>\"2014-02-17 15:45:28 +0900\", \"appliedAdapters\"=>[\"Droonga::Plug"
"ins::SampleLoggerPlugin::Adapter\", \"Droonga::Plugins::Error::Adapter\"]}>\n"
"~~~"
msgstr ""

msgid "## Adaption for both incoming and outgoing messages"
msgstr "## 入出力メッセージの加工"

msgid ""
"We have learned the basics of plugins for the pre adaption phase and the post "
"adaption phase so far.\n"
"Let's try to build more practical plugin."
msgstr ""
"ここまでで、前適合フェーズと後適合フェーズで動作するプラグインの基本を学びました。\n"
"それでは、より実践的なプラグインを開発してみることにしましょう。"

msgid ""
"You may feel the Droonga's `search` command is too flexible for your purpose.\n"
"Here, we're going to add our own `storeSearch` command to wrap the `search` co"
"mmand in order to provide an application-specific and simple interface, with a"
" new plugin named `store-search`."
msgstr ""
"Droongaの`search`コマンドを見た時、目的に対していささか柔軟すぎるという印象を持ったことと思います\n"
"そこで、ここではアプリケーション固有の単純なインターフェースを持つコマンドとして、`search`コマンドをラップする`storeSearch`というコマン"
"ドを、`store-search`というプラグインで追加していくことにします。"

msgid "### Accepting of simple requests"
msgstr "### シンプルなリクエストを受け取る"

msgid ""
"First, create the `store-search` plugin.\n"
"Remember, you must put codes into a file which has the name same to the plugin"
" now you are creating.\n"
"So, the file is `store-search.rb` in the `droonga/plugins` directory. Then def"
"ine your `StoreSearchPlugin` as follows:"
msgstr ""
"まず最初に、`store-search`プラグインを作ります。\n"
"思い出して下さい、プラグインを実装するコードは、これから作ろうとしているプラグインと同じ名前のファイルに書かなくてはなりませんでしたよね。\n"
"ですので、実装を書くファイルは`droonga/plugins`ディレクトリに置かれた`store-search.rb`となります。`StoreSearch"
"Plugin`を以下のように定義しましょう："

msgid "lib/droonga/plugins/store-search.rb:"
msgstr ""

msgid ""
"module Droonga\n"
"  module Plugins\n"
"    module StoreSearchPlugin\n"
"      extend Plugin\n"
"      register(\"store-search\")"
msgstr ""

msgid ""
"      class Adapter < Droonga::Adapter\n"
"        input_message.pattern = [\"type\", :equal, \"storeSearch\"]"
msgstr ""

msgid ""
"        def adapt_input(input_message)\n"
"          logger.info(\"StoreSearchPlugin::Adapter\", :message => input_message)"
msgstr ""

msgid ""
"          query = input_message.body[\"query\"]\n"
"          logger.info(\"storeSearch\", :query => query)"
msgstr ""

msgid ""
"          body = {\n"
"            \"queries\" => {\n"
"              \"stores\" => {\n"
"                \"source\"    => \"Store\",\n"
"                \"condition\" => {\n"
"                  \"query\"   => query,\n"
"                  \"matchTo\" => \"_key\",\n"
"                },\n"
"                \"output\"    => {\n"
"                  \"elements\"   => [\n"
"                    \"startTime\",\n"
"                    \"elapsedTime\",\n"
"                    \"count\",\n"
"                    \"attributes\",\n"
"                    \"records\",\n"
"                  ],\n"
"                  \"attributes\" => [\n"
"                    \"_key\",\n"
"                  ],\n"
"                  \"limit\"      => -1,\n"
"                }\n"
"              }\n"
"            }\n"
"          }"
msgstr ""

msgid ""
"          input_message.type = \"search\"\n"
"          input_message.body = body\n"
"        end\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"Then update your `catalog.json` to activate the plugin.\n"
"Remove the `sample-logger` plugin previously created."
msgstr ""
"次に、プラグインを有効化するために`catalog.json`を更新します。\n"
"先程作成した`sample-logger`は削除しておきます。"

msgid ""
"~~~\n"
"(snip)\n"
"      \"datasets\": {\n"
"        \"Starbucks\": {\n"
"          (snip)\n"
"          \"plugins\": [\"store-search\", \"groonga\", \"crud\", \"search\", \"dump\", \"st"
"atus\"],\n"
"(snip)\n"
"~~~"
msgstr ""

msgid ""
"Remember, you must place your plugin `\"store-search\"` before the `\"search\"` be"
"cause yours depends on it."
msgstr "思い出して下さい、`\"store-search\"`は`\"search\"`に依存しているので、`\"search\"`よりも前に置く必要があります。"

msgid "Now you can use this new command by the following request:"
msgstr "これで、以下のようなリクエストで新しいコマンドを使えるようになりました："

msgid "store-search-columbus.json:"
msgstr ""

msgid ""
"~~~json\n"
"{\n"
"  \"dataset\" : \"Starbucks\",\n"
"  \"type\"    : \"storeSearch\",\n"
"  \"body\"    : {\n"
"    \"query\" : \"Columbus\"\n"
"  }\n"
"}\n"
"~~~"
msgstr ""

msgid "In order to issue this request, you need to run:"
msgstr "リクエストを発行するために、以下のようにコマンドを実行しましょう："

msgid ""
"~~~\n"
"# droonga-request --tag starbucks store-search-columbus.json\n"
"Elapsed time: 0.01494\n"
"[\n"
"  \"droonga.message\",\n"
"  1392621168,\n"
"  {\n"
"    \"inReplyTo\": \"1392621168.0119512\",\n"
"    \"statusCode\": 200,\n"
"    \"type\": \"storeSearch.result\",\n"
"    \"body\": {\n"
"      \"stores\": {\n"
"        \"count\": 2,\n"
"        \"records\": [\n"
"          [\n"
"            \"Columbus @ 67th - New York NY  (W)\"\n"
"          ],\n"
"          [\n"
"            \"2 Columbus Ave. - New York NY  (W)\"\n"
"          ]\n"
"        ]\n"
"      }\n"
"    }\n"
"  }\n"
"]\n"
"~~~"
msgstr ""

msgid "And you will see the result on fluentd's log in `fluentd.log`:"
msgstr "この時、`fluentd.log`には以下のようなログが出力されているはずです："

msgid ""
"~~~\n"
"2014-02-17 16:12:48 +0900 [info]: StoreSearchPlugin::Adapter message=#<Droonga"
"::InputMessage:0x007fe4791d3958 @raw_message={\"dataset\"=>\"Starbucks\", \"type\"=>"
"\"storeSearch\", \"body\"=>{\"query\"=>\"Columbus\"}, \"replyTo\"=>{\"type\"=>\"storeSearch"
".result\", \"to\"=>\"127.0.0.1:49934/droonga\"}, \"id\"=>\"1392621168.0119512\", \"date\""
"=>\"2014-02-17 16:12:48 +0900\", \"appliedAdapters\"=>[]}>\n"
"2014-02-17 16:12:48 +0900 [info]: storeSearch query=\"Columbus\"\n"
"~~~"
msgstr ""

msgid "Now we can perform store search with simple requests."
msgstr "以上の手順で、単純なリクエストによって店舗の検索を行えるようになりました。"

msgid ""
"Note: look at the `\"type\"` of the response message. Now it became `\"storeSearc"
"h.result\"`, from `\"search.result\"`. Because it is triggered from the incoming "
"message with the type `\"storeSearch\"`, the outgoing message has the type `\"(in"
"coming command).result\"` automatically. In other words, you don't have to chan"
"ge the type of the outgoing messages, like `input_message.type = \"search\"` in "
"the method `adapt_input`."
msgstr ""
"注意：レスポンスのメッセージの`\"type\"`の値が`\"search.result\"`から`\"storeSearch.result\"`に変わっていることに注"
"目して下さい。これは、このレスポンスが、`type`が`\"storeSearch\"`であるリクエストに起因して発生した物であるために、Droonga Eng"
"ineによって自動的に`\"(入力メッセージのtype).result\"`という`type`が設定されたからです。言い換えると、出力メッセージの`type`は"
"、`adapt_input`での`input_message.type = \"search\"`のような方法でわざわざ自分で設定し直す必要はありません。"

msgid "### Returning of simple responses"
msgstr "### シンプルなレスポンスを返す"

msgid ""
"Second, let's return results in more simple way: just an array of the names of"
" stores."
msgstr "次に、結果をより単純な形で、単に店舗の名前の配列だけを返すだけという物にしてみましょう。"

msgid "Define the `adapt_output` method as follows."
msgstr "`adapt_output`を以下のように定義して下さい。"

msgid ""
"~~~ruby\n"
"(snip)\n"
"    module StoreSearchPlugin\n"
"      extend Plugin\n"
"      register(\"store-search\")"
msgstr ""

msgid ""
"      class Adapter < Droonga::Adapter\n"
"        (snip)"
msgstr ""

msgid ""
"        def adapt_output(output_message)\n"
"          logger.info(\"StoreSearchPlugin::Adapter\", :message => output_message"
")"
msgstr ""

msgid ""
"          records = output_message.body[\"stores\"][\"records\"]\n"
"          simplified_results = records.flatten"
msgstr ""

msgid ""
"          output_message.body = simplified_results\n"
"        end\n"
"      end\n"
"    end\n"
"(snip)\n"
"~~~"
msgstr ""

msgid ""
"The `adapt_output` method receives outgoing messages only corresponding to the"
" incoming messages trapped by the plugin."
msgstr "`adapt_output`メソッドは、そのプラグインによって捕捉された入力メッセージに対応する出力メッセージのみを受け取ります。"

msgid "Send the request:"
msgstr "リクエストを送ってみましょう："

msgid ""
"~~~\n"
"# droonga-request --tag starbucks store-search-columbus.json\n"
"Elapsed time: 0.014859\n"
"[\n"
"  \"droonga.message\",\n"
"  1392621288,\n"
"  {\n"
"    \"inReplyTo\": \"1392621288.158763\",\n"
"    \"statusCode\": 200,\n"
"    \"type\": \"storeSearch.result\",\n"
"    \"body\": [\n"
"      \"Columbus @ 67th - New York NY  (W)\",\n"
"      \"2 Columbus Ave. - New York NY  (W)\"\n"
"    ]\n"
"  }\n"
"]\n"
"~~~"
msgstr ""

msgid "The log in `fluentd.log` will be like this:"
msgstr "`fluentd.log`には以下のようなログが出力されているはずです："

msgid ""
"~~~\n"
"2014-02-17 16:14:48 +0900 [info]: StoreSearchPlugin::Adapter message=#<Droonga"
"::InputMessage:0x007ffb8ada9d68 @raw_message={\"dataset\"=>\"Starbucks\", \"type\"=>"
"\"storeSearch\", \"body\"=>{\"query\"=>\"Columbus\"}, \"replyTo\"=>{\"type\"=>\"storeSearch"
".result\", \"to\"=>\"127.0.0.1:49960/droonga\"}, \"id\"=>\"1392621288.158763\", \"date\"="
">\"2014-02-17 16:14:48 +0900\", \"appliedAdapters\"=>[]}>\n"
"2014-02-17 16:14:48 +0900 [info]: storeSearch query=\"Columbus\"\n"
"2014-02-17 16:14:48 +0900 [info]: StoreSearchPlugin::Adapter message=#<Droonga"
"::OutputMessage:0x007ffb8ad78e48 @raw_message={\"dataset\"=>\"Starbucks\", \"type\"="
">\"dispatcher\", \"body\"=>{\"stores\"=>{\"count\"=>2, \"records\"=>[[\"Columbus @ 67th -"
" New York NY  (W)\"], [\"2 Columbus Ave. - New York NY  (W)\"]]}}, \"replyTo\"=>{\"t"
"ype\"=>\"storeSearch.result\", \"to\"=>\"127.0.0.1:49960/droonga\"}, \"id\"=>\"139262128"
"8.158763\", \"date\"=>\"2014-02-17 16:14:48 +0900\", \"appliedAdapters\"=>[\"Droonga::"
"Plugins::StoreSearchPlugin::Adapter\", \"Droonga::Plugins::Error::Adapter\"], \"or"
"iginalTypes\"=>[\"storeSearch\"]}>\n"
"~~~"
msgstr ""

msgid "Now you've got the simplified response."
msgstr "このように、単純化されたレスポンスを受け取ることができました。"

msgid ""
"In the way just described, we can use adapter to implement the application spe"
"cific search logic."
msgstr "ここで解説したように、アダプターはアプリケーション固有の検索機能を実装するために利用できます。"

msgid "## Conclusion"
msgstr "## まとめ"

msgid ""
"We have learned how to add a new command based only on a custom adapter and an"
" existing command.\n"
"In the process, we also have learned how to receive and modify messages, both "
"of incoming and outgoing."
msgstr ""
"既存のコマンドと独自のアダプターのみを使って新しいコマンドを追加する方法について学びました。\n"
"その過程で、入力メッセージと出力メッセージの両方について、どのように受け取り加工するのかについても学びました。"

msgid ""
"See also the [reference manual](../../../reference/plugin/adapter/) for more d"
"etails."
msgstr "詳細は[リファレンスマニュアル](../../../reference/plugin/adapter/)を参照して下さい。"

msgid ""
"  [basic tutorial]: ../../basic/\n"
"  [overview]: ../../../overview/\n"
"  [search]: ../../../reference/commands/select/"
msgstr ""
